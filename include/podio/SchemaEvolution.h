#ifndef PODIO_SCHEMAEVOLUTION_H
#define PODIO_SCHEMAEVOLUTION_H

#include <cstdint>
#include <functional>
#include <string>
#include <unordered_map>
#include <vector>

namespace podio {

enum class Backend { ROOT, SIO };

using SchemaVersionT = uint32_t;

struct CollectionReadBuffers;

class SchemaEvolution {
  using EvolutionFuncT = std::function<podio::CollectionReadBuffers(podio::CollectionReadBuffers, SchemaVersionT)>;
  using VersionMapT = std::vector<EvolutionFuncT>;
  using EvolutionMapT = std::unordered_map<std::string, VersionMapT>;

public:
  /**
   * Enum to make it possible to prioritize evolution functions during
   * registration, making AutoGenerated lower priority than UserDefined
   */
  enum class Priority { AutoGenerated = 0, UserDefined = 1 };

  SchemaEvolution(const SchemaEvolution&) = delete;
  SchemaEvolution& operator=(const SchemaEvolution&) = delete;
  SchemaEvolution(SchemaEvolution&&) = delete;
  SchemaEvolution& operator=(SchemaEvolution&&) = delete;

  ~SchemaEvolution() = default;

  static SchemaEvolution& mutInstance();
  static SchemaEvolution const& instance();

  // TODO: Make this take a string_view
  podio::CollectionReadBuffers evolveBuffers(podio::CollectionReadBuffers oldBuffers, SchemaVersionT fromVersion,
                                             const std::string& collType) const;

  /**
   * Register an evoution function. Make the priority UserDefine dy default, so
   * that users do not have to add that argument, and instead make code
   * generation put the AutoGenerated value there
   *
   * NOTE: Currently necessary to fill the auto generated ones in the correct
   * order of fromVersion (becoming larger).
   */
  void registerEvolutionFunc(const std::string& collType, SchemaVersionT fromVersion,
                             const EvolutionFuncT& evolutionFunc, Priority priority = Priority::UserDefined);

private:
  SchemaEvolution() = default;

  EvolutionMapT m_evolutionFuncs{};
};

} // namespace podio

#endif // PODIO_SCHEMAEVOLUTION_H
