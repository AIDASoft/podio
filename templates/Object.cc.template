// datamodel specific includes
#include "${name}Obj.h"
#include "${name}Data.h"
#include "${name}Collection.h"
#include <iostream>

${name}::${name}() : m_obj(new ${name}Obj()){};

${name}::${name}(const ${name}& other) : m_obj(other.m_obj) {
  m_obj->increaseRefCount();
};

$getters
$setters
$relations
bool  ${name}::isAvailable() const {
  if (m_obj != nullptr) {
    return true;
  }
  return false;
}

const albers::ObjectID ${name}::getObjectID() const {
  return m_obj->id;
}


${name}::${name}(${name}Obj* obj) : m_obj(obj){
  if(m_obj != nullptr)
    m_obj->increaseRefCount();
}

${name}& ${name}::operator=(const ${name}& other){
  if ( m_obj != nullptr && m_obj->decreaseRefCount()==0) {
    std::cout << "deleting free-floating ${name} at " << m_obj << std::endl;
    delete m_obj;
  }
  m_obj = other.m_obj;
  return *this;
}

${name}::~${name}(){
  if ( m_obj != nullptr && m_obj->decreaseRefCount()==0 ){
    std::cout << "deleting free-floating ${name} at " << m_obj << std::endl;
    delete m_obj;
   }
}

//bool operator< (const ${name}& p1, const ${name}& p2 ) {
//  if( p1.m_containerID == p2.m_containerID ) {
//    return p1.m_index < p2.m_index;
//  } else {
//    return p1.m_containerID < p2.m_containerID;
//  }
//}
