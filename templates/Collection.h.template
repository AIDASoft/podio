//AUTOMATICALLY GENERATED - DO NOT EDIT

#ifndef ${name}Collection_H
#define  ${name}Collection_H

#include <string>
#include <vector>
#include <deque>
#include <array>
#include <algorithm>

// podio specific includes
#include "podio/ICollectionProvider.h"
#include "podio/CollectionBase.h"
#include "podio/CollectionIDTable.h"

// datamodel specific includes
#include "${name}Data.h"
#include "${name}.h"
#include "${name}Obj.h"

${namespace_open}
typedef std::vector<${name}Data> ${name}DataContainer;
typedef std::deque<${name}Obj*> ${name}ObjPointerContainer;

class ${name}CollectionIterator {

  public:
    ${name}CollectionIterator(int index, const ${name}ObjPointerContainer* collection) : m_index(index), m_object(nullptr), m_collection(collection) {}

    bool operator!=(const ${name}CollectionIterator& x) const {
      return m_index != x.m_index; //TODO: may not be complete
    }

    const ${name} operator*() const;
    const ${name}* operator->() const;
    const ${name}CollectionIterator& operator++() const;

  private:
    mutable int m_index;
    mutable ${name} m_object;
    const ${name}ObjPointerContainer* m_collection;
};

/**
A Collection is identified by an ID.
*/

class ${name}Collection : public podio::CollectionBase {

public:
  typedef const ${name}CollectionIterator const_iterator;

  ${name}Collection();
//  ${name}Collection(const ${name}Collection& ) = delete; // deletion doesn't work w/ ROOT IO ! :-(
//  ${name}Collection(${name}Vector* data, int collectionID);
  ~${name}Collection();

  void clear();
  /// Append a new object to the collection, and return this object.
  ${name} create();

  /// Append a new object to the collection, and return this object.
  /// Initialized with the parameters given
  template<typename... Args>
  ${name} create(Args&&... args);
  int size() const;

  /// Returns the object of given index
  const ${name} operator[](unsigned int index) const;
  /// Returns the object of given index
  const ${name} at(unsigned int index) const;


  /// Append object to the collection
  void push_back(Const${name} object);

  void prepareForWrite();
  void prepareAfterRead();
  void setBuffer(void* address);
  bool setReferences(const podio::ICollectionProvider* collectionProvider);

  podio::CollRefCollection* referenceCollections() { return &m_refCollections;};

  void setID(unsigned ID){
    m_collectionID = ID;
    std::for_each(m_entries.begin(),m_entries.end(),
                 [ID](${name}Obj* obj){obj->id = {obj->id.index,static_cast<int>(ID)}; }
    );
  };

  bool isValid() const {
    return m_isValid;
  }

  // support for the iterator protocol
  const const_iterator begin() const {
    return const_iterator(0, &m_entries);
  }
  const	const_iterator end() const {
    return const_iterator(m_entries.size(), &m_entries);
  }

  /// returns the address of the pointer to the data buffer
  void* getBufferAddress() { return (void*)&m_data;};

  /// returns the pointer to the data buffer
  std::vector<${name}Data>* _getBuffer() { return m_data;};

   ${vectorized_access_declaration}

private:
  bool m_isValid;
  int m_collectionID;
  ${name}ObjPointerContainer m_entries;
  // members to handle 1-to-N-relations
${relations}
  // members to handle streaming
  podio::CollRefCollection m_refCollections;
  ${name}DataContainer* m_data;
};

template<typename... Args>
${name}  ${name}Collection::create(Args&&... args){
  int size = m_entries.size();
  auto obj = new ${name}Obj({size,m_collectionID},{args...});
  m_entries.push_back(obj);
  return ${name}(obj);
}

${vectorized_access_implementation}
${namespace_close}
#endif
