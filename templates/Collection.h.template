#ifndef ${name}Collection_H
#define  ${name}Collection_H

#include <string>
#include <vector>

// albers specific includes 
#include "albers/Registry.h"
#include "albers/CollectionBase.h"

// datamodel specific includes
#include "${name}.h"
#include "${name}Handle.h"

typedef std::vector<${name}> ${name}Vector;
typedef std::vector<${name}Handle> ${name}HandleVector;

class ${name}CollectionIterator {

  public:
    ${name}CollectionIterator(int index, const ${name}Collection* collection) : m_index(index), m_collection(collection) {}

    bool operator!=(const ${name}CollectionIterator& x) const {
      return m_index != x.m_index; //TODO: may not be complete
    }
         
    const ${name}Handle operator*() const;
         
    const ${name}CollectionIterator& operator++() const {
      ++m_index;
      return *this;
    }

  private:
    mutable int m_index;
    const ${name}Collection* m_collection;
};

class ${name}Collection : public albers::CollectionBase {

public:
  typedef const ${name}CollectionIterator const_iterator;

  ${name}Collection();
//  ${name}Collection(${name}Vector* data, int collectionID);
  ~${name}Collection(){};

  void clear();
  ${name}Handle create();
  ${name}Handle get(int index) const;

  void prepareForWrite(const albers::Registry* registry);
  void prepareAfterRead(albers::Registry* registry);
  void setPODsAddress(const void* address);
  void setID(int ID){m_collectionID = ID;};

  // support for the iterator protocol
  const const_iterator begin() const {
    return const_iterator(0, this);
  }
  const	const_iterator end() const { 
    return const_iterator(m_handles.size(), this);
  }

  void* _getRawBuffer(){ return (void*)&m_data;};
  std::vector<${name}>* _getBuffer(){ return m_data;};
private:
  int m_collectionID;
  ${name}Vector* m_data;
  ${name}HandleVector m_handles;

};

#endif