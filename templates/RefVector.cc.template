std::vector<${relationtype}>::const_iterator ${classname}::${relation}_begin() const {
  auto ret_value = m_obj->m_${relation}->begin();
  std::advance(ret_value, m_obj->data.${relation}_begin);
  return ret_value;
}

std::vector<${relationtype}>::const_iterator ${classname}::${relation}_end() const {
  auto ret_value = m_obj->m_${relation}->begin();
//fg: this code fails if m_obj->data.${relation}==0
//  std::advance(ret_value, m_obj->data.${relation}_end-1);
//  return ++ret_value;
  std::advance(ret_value, m_obj->data.${relation}_end);
  return ret_value;
}

void ${classname}::${add_relation}(${relationtype} component) {
  m_obj->m_${relation}->push_back(component);
  m_obj->data.${relation}_end++;
}

unsigned int ${classname}::${relation}_size() const {
  return (m_obj->data.${relation}_end-m_obj->data.${relation}_begin);
}

${relationtype} ${classname}::${get_relation}(unsigned int index) const {
  if (${relation}_size() > index) {
    return m_obj->m_${relation}->at(m_obj->data.${relation}_begin+index);
  }
  else throw std::out_of_range ("index out of bounds for existing references");
}
