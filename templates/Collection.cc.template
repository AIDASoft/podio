// standard includes
#include <stdexcept>
${includes}

#include "${name}Collection.h"

${name}Collection::${name}Collection() : m_collectionID(0), m_entries() ${initializers},m_refCollections(nullptr), m_data(new ${name}DataContainer() ) {
  ${constructorbody}
}

const ${name} ${name}Collection::operator[](int index) const {
  return ${name}(m_entries[index]);
}

int  ${name}Collection::size() const {
  return m_entries.size();
}

${name} ${name}Collection::create(){
  auto obj = new ${name}Obj();
  m_entries.emplace_back(obj);
${create_relations}
  obj->id = {int(m_entries.size()-1),m_collectionID};
  return ${name}(obj);
}

void ${name}Collection::clear(){
  m_data->clear();
${clear_relations}
  for (auto& obj : m_entries) { delete obj; }
  m_entries.clear();
}

void ${name}Collection::prepareForWrite(){
  int index = 0;
  auto size = m_entries.size();
  m_data->reserve(size);
  for (auto& obj : m_entries) {m_data->push_back(obj->data); }
  if (m_refCollections != nullptr) {
    for (auto& pointer : (*m_refCollections)) {pointer->clear(); }
  }
  $prepareforwritinghead
  for(int i=0, size = m_data->size(); i != size; ++i){
  $prepareforwritingbody
  }
  $prepareforwriting_refmembers
}

void ${name}Collection::prepareAfterRead(){
  int index = 0;
  for (auto& data : *m_data){
    auto obj = new ${name}Obj({index,m_collectionID}, data);
    $prepareafterread
    m_entries.emplace_back(obj);
    ++index;
  }
}

bool ${name}Collection::setReferences(const albers::ICollectionProvider* collectionProvider){
$setreferences
${prepareafterread_refmembers}
  return true; //TODO: check success
}

void ${name}Collection::push_back(${name} object){
    int size = m_entries.size();
    auto obj = object.m_obj;
    if (obj->id.index == albers::ObjectID::untracked) {
        obj->id = {size,m_collectionID};
        m_entries.push_back(obj);
        ${push_back_relations}
    } else {
      throw std::invalid_argument( "Cannot add an object to collection that is already owned by another collection." );

    }
}

void ${name}Collection::setBuffer(void* address){
  m_data = static_cast<${name}DataContainer*>(address);
}


const ${name} ${name}CollectionIterator::operator* () const {
  m_object.m_obj = (*m_collection)[m_index];
  return m_object;
}

const ${name}* ${name}CollectionIterator::operator-> () const {
    m_object.m_obj = (*m_collection)[m_index];
    return &m_object;
}

const ${name}CollectionIterator& ${name}CollectionIterator::operator++() const {
  ++m_index;
 return *this;
}
