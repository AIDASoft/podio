// standard includes
#include <stdexcept>
${includes}

#include "${name}Collection.h"

${namespace_open}

${name}Collection::${name}Collection() : m_isValid(false), m_collectionID(0), m_entries() ${initializers},m_data(new ${name}DataContainer() ) {
  ${constructorbody}
}

${name}Collection::~${name}Collection() {
  clear();
  if (m_data != nullptr) delete m_data;
  ${destructorbody}
};

const ${name} ${name}Collection::operator[](unsigned int index) const {
  return ${name}(m_entries[index]);
}

const ${name} ${name}Collection::at(unsigned int index) const {
  return ${name}(m_entries.at(index));
}

int  ${name}Collection::size() const {
  return m_entries.size();
}

${name} ${name}Collection::create(){
  auto obj = new ${name}Obj();
  m_entries.emplace_back(obj);
${create_relations}
  obj->id = {int(m_entries.size()-1),m_collectionID};
  return ${name}(obj);
}

void ${name}Collection::clear(){
  m_data->clear();
${clear_relations}
  for (auto& obj : m_entries) { delete obj; }
  m_entries.clear();
}

void ${name}Collection::prepareForWrite(){
  auto size = m_entries.size();
  m_data->reserve(size);
  for (auto& obj : m_entries) {m_data->push_back(obj->data); }
  for (auto& pointer : m_refCollections) {pointer->clear(); } 
$prepareforwritinghead
  for(int i=0, size = m_data->size(); i != size; ++i){
$prepareforwritingbody
  }
$prepareforwriting_refmembers
}

void ${name}Collection::prepareAfterRead(){
  int index = 0;
  for (auto& data : *m_data){
    auto obj = new ${name}Obj({index,m_collectionID}, data);
    $prepareafterread
    m_entries.emplace_back(obj);
    ++index;
  }
  m_isValid = true;  
}

bool ${name}Collection::setReferences(const podio::ICollectionProvider* collectionProvider){
$setreferences
${prepareafterread_refmembers}
  return true; //TODO: check success
}

void ${name}Collection::push_back(Const${name} object){
  int size = m_entries.size();
  auto obj = object.m_obj;
  if (obj->id.index == podio::ObjectID::untracked) {
      obj->id = {size,m_collectionID};
      m_entries.push_back(obj);
      ${push_back_relations}
  } else {
    throw std::invalid_argument( "Object already in a collection. Cannot add it to a second collection " );
  }
}

void ${name}Collection::setBuffer(void* address){
  if (m_data != nullptr) delete m_data;
  m_data = static_cast<${name}DataContainer*>(address);
}


const ${name} ${name}CollectionIterator::operator* () const {
  m_object.m_obj = (*m_collection)[m_index];
  return m_object;
}

const ${name}* ${name}CollectionIterator::operator-> () const {
  m_object.m_obj = (*m_collection)[m_index];
  return &m_object;
}

const ${name}CollectionIterator& ${name}CollectionIterator::operator++() const {
  ++m_index;
  return *this;
}

${namespace_close}
