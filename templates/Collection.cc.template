#include "${package_name}/${name}Collection.h"

${name}Collection::${name}Collection() : m_collectionID(0), m_data(new ${name}Vector() ){
}

const ${name}Handle& ${name}Collection::get(int index) const{
  return m_handles[index];
}

${name}Handle& ${name}Collection::create() {
  m_data->emplace_back(${name}());
  int index = m_data->size()-1;
  m_handles.emplace_back(${name}Handle(index,m_collectionID, m_data));
  auto& tmp_handle = m_handles.back();
${create_relations}
  return tmp_handle;
}

${name}Handle& ${name}Collection::insert(const ${name}Handle& origin) {
  m_data->emplace_back(origin.read());
  int index = m_data->size()-1;
  m_handles.emplace_back(${name}Handle(index,m_collectionID, m_data));
  auto& tmp_handle = m_handles.back();
${create_relations}
  return tmp_handle;
}  

void ${name}Collection::clear(){
  m_data->clear();
  m_handles.clear();
${clear_relations}
}

void ${name}Collection::prepareForWrite(const albers::Registry* registry){
$prepareforwritingbody
}

void ${name}Collection::prepareAfterRead(albers::Registry* registry){
  m_handles.clear();
  int index = 0;
  // fix. otherwise, m_collectionID == 0..
  m_collectionID = registry->getIDFromPODAddress( _getBuffer() );
  for (auto& data : *m_data){
    $prepareafterreadbody
    m_handles.emplace_back(${name}Handle(index,m_collectionID, m_data));
    ++index;
  }
}


void ${name}Collection::setPODsAddress(const void* address){
  m_data = (${name}Vector*)address;
}


const ${name}Handle ${name}CollectionIterator::operator* () const {
  return m_collection->get(m_index);
}

//std::vector<std::pair<std::string,albers::CollectionBase*>>& referenceCollections() {
//}


void ${name}Collection::print() const {
  std::cout<<"collection "<<m_collectionID
           <<", buf "<<m_data
           <<", nhandles "<<m_handles.size()<<std::endl;
}

