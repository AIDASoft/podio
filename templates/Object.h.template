#ifndef ${name}_H
#define ${name}_H
$includes
#include <vector>
#include "podio/ObjectID.h"

// $description
// author: $author

//forward declarations
class ${name}Collection;
class ${name}CollectionIterator;
class ${name}Obj;

#include "${name}Obj.h"

class ${name} {

  friend ${name}Collection;
  friend ${name}CollectionIterator;

public:

  /// default constructor
  ${name}();
  ${constructor_declaration}
  /// copy constructor
  ${name}(const ${name}& other);
  /// copy-assignment operator
  ${name}& operator=(const ${name}& other);
  /// constructor from existing ${name}Obj
  ${name}(${name}Obj* obj);
  /// support cloning (deep-copy)
  ${name} clone() const;
  /// destructor
  ~${name}();

$getter_declarations
$setter_declarations
$relation_declarations
  /// check whether the object is actually available
  bool isAvailable() const;
  /// disconnect from ${name}Obj instance
  void unlink(){m_obj = nullptr;};

  bool operator==(const ${name}& other) const {
       return (m_obj==other.m_obj);
  }

// less comparison operator, so that objects can be e.g. stored in sets.
//  friend bool operator< (const ${name}& p1,
//       const ${name}& p2 );

  const podio::ObjectID getObjectID() const;

private:
  ${name}Obj* m_obj;

};

#endif
