#ifndef ${name}_H
#define ${name}_H
$includes
#include <vector>
#include "albers/ObjectID.h"
#include <iostream>

// $description
// author: $author

//forward declarations
class ${name}Collection;
class ${name}CollectionIterator;
class ${name}Obj;

#include "${name}Obj.h"

namespace albers {
  class Registry;
}


class ${name} {

  friend ${name}Collection;
  friend ${name}CollectionIterator;

public:

  ${name}();
  ${name}(const ${name}& other);
  ${name}& operator=(const ${name}& other);
  ${name}(${name}Obj* obj);
  ~${name}();

$getter_declarations
$setter_declarations
$relation_declarations
  bool isAvailable() const; // precheck whether the pointee actually exists
  void unlink(){m_obj = nullptr;};

  bool operator==(const ${name}& other) const {
       return (m_obj==other.m_obj);
  }

  /// less comparison operator, so that objects can be e.g. stored in sets.
//  friend bool operator< (const ${name}& p1,
//       const ${name}& p2 );

  const albers::ObjectID getObjectID() const;

private:
  ${name}Obj* m_obj;

};

#endif
