#ifndef Const${name}_H
#define Const${name}_H
$includes
#include <vector>
#include "podio/ObjectID.h"

//forward declarations
$forward_declarations

#include "${name}Obj.h"

${namespace_open}

class ${name}Obj;
class ${name};
class ${name}Collection;
class ${name}CollectionIterator;

/** @class Const${name}
 *  $description
 *  @author: $author
 */

class Const${name} {

  friend ${name};
  friend ${name}Collection;
  friend ${name}CollectionIterator;

public:

  /// default constructor
  Const${name}();
  ${constructor_declaration}
  /// constructor from existing ${name}Obj
  Const${name}(${name}Obj* obj);
  /// copy constructor
  Const${name}(const Const${name}& other);
  /// copy-assignment operator
  Const${name}& operator=(const Const${name}& other);
  /// support cloning (deep-copy)
  Const${name} clone() const;
  /// destructor
  ~Const${name}();


public:

$getter_declarations
$relation_declarations
$constextracode_declarations
  /// check whether the object is actually available
  bool isAvailable() const;
  /// disconnect from ${name}Obj instance
  void unlink(){m_obj = nullptr;}

  bool operator==(const Const${name}& other) const {
       return (m_obj==other.m_obj);
  }

  bool operator==(const ${name}& other) const;

// less comparison operator, so that objects can be e.g. stored in sets.
//  friend bool operator< (const ${name}& p1,
//       const ${name}& p2 );
  bool operator<(const Const${name}& other) const { return m_obj < other.m_obj  ; }

  const podio::ObjectID getObjectID() const;

private:
  ${name}Obj* m_obj;

};
${namespace_close}

#endif
