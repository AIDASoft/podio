#ifndef ${name}HANDLE_H
#define ${name}HANDLE_H
$includes
#include <vector>

// $description
// author: $author

//forward declaration of $name container
class ${name}Collection;

namespace albers {
  class Registry;
}

class ${name}Handle {

  friend ${name}Collection;

public:

${name}Handle(){};

//TODO: Proper syntax to use, but ROOT doesn't handle it:  ${name}Handle() = default;

  // COLIN: too painful to call each setter one by one, and unsafe. remove setters and use a parameter list in the constructor? or an init function2222
$getter_declarations
$setter_declarations

  // COLIN: I'd make that a true const method, and would set m_container in prepareAFterRead. What if the user doesn't call that?
  bool isAvailable() const; // precheck whether the pointee actually exists
  void prepareForWrite(const albers::Registry*);  // use m_container to set m_containerID properly
  void prepareAfterRead(albers::Registry*);   // use m_containerID to set m_container properly

  bool operator==(const ${name}Handle& other) const {
       return (m_index==other.m_index) && (other.m_containerID==other.m_containerID);
  }

private:
  ${name}Handle(int index, int containerID,  std::vector<${name}>* container);
  int m_index;
  int m_containerID;
  // COLIN: after reading, the transient m_container address must be taken from the registry using the persistent m_containerID and set. This seems to happen in isAvailable... why not in prepareAfterRead?
  mutable std::vector<${name}>* m_container; //! transient
  albers::Registry* m_registry; //! transient
//  bool _retrieveData();

};

#endif
