#!/usr/bin/env python3
"""podio-merge-files tool to merge any number of podio files into one"""

import argparse
import sys

parser = argparse.ArgumentParser(
    description="Merge any number of podio files into one, can merge TTree and RNTuple files"
)

parser.add_argument("--output-file", help="name of the output file", required=True)
parser.add_argument("files", nargs="+", help="which files to merge")
parser.add_argument(
    "--metadata",
    choices=["none", "all", "first"],
    default="first",
    help="metadata to include in the output file, default: "
    "only the one from the first file, other options: all files, none",
)
args = parser.parse_args()

# Import podio later for quick help messages
import podio  # pylint: disable=wrong-import-position # noqa: E402
import podio.root_io  # pylint: disable=wrong-import-position # noqa: E402
from podio import reading  # pylint: disable=wrong-import-position # noqa: E402

all_files = set()
for f in args.files:
    if f in all_files:
        raise ValueError(f"File {f} is present more than once in the input list")
    all_files.add(f)

reader = reading.get_reader(args.files)
if isinstance(reader, podio.root_io.Reader):
    writer = podio.root_io.Writer(args.output_file)
elif isinstance(reader, podio.root_io.RNTupleReader):
    writer = podio.root_io.RNTupleWriter(args.output_file)
else:
    raise ValueError(f"Input file {args.files[0]} is not a TTree or RNTuple file")

categories = list(reader.categories)
is_metadata_available = True  # pylint: disable=invalid-name
try:
    # All frames will be copied as they are except the metadata ones
    categories.remove("metadata")
except ValueError:
    is_metadata_available = False  # pylint: disable=invalid-name

for category in categories:
    all_frames = reader.get(category)
    for frame in all_frames:
        writer.write_frame(frame, category)

if args.metadata == "none":
    sys.exit(0)

if not is_metadata_available:
    print("Warning: metadata category 'metadata' not found in the input files, it will be created")
    all_frames = [podio.Frame()]
else:
    if args.metadata == "first":
        all_frames = [reader.get("metadata")[0]]
    else:
        all_frames = reader.get("metadata")
for frame in all_frames:
    frame.put_parameter("MergedInputFiles", args.files)
    writer.write_frame(frame, "metadata")
