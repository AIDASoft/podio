#!/usr/bin/env python3
"""podio-dump tool to dump contents of podio files"""

from podio.EventStore import EventStore


def dump_evt_overview(event, ievt):
  """Print an overview table of the event contents of the given event"""
  print('{:#^82}'.format(f' Event {ievt} '))  # pylint: disable=consider-using-f-string
  print(f'{"Name":<30} {"Type":<40} {"Size":<10}')
  print('-' * 82)
  for name in event.collections():
    coll = event.get(name)
    print(f'{name:<30} {coll.getValueTypeName():<40} {len(coll):<10}')


def dump_overview(store, events):
  """Print an overview for all the desired events"""
  for ievt in events:
    event = store[ievt]
    dump_evt_overview(event, ievt)


def dump_evt_detailed(event, ievt):
  """Dump this event in all its glory"""
  print()
  print('{:#^82}'.format(f' Event {ievt} '))  # pylint: disable=consider-using-f-string
  print()

  print('Parameters', flush=True)
  event.metadata().print()
  print(flush=True)

  for name in event.collections():
    print(name, flush=True)
    event.get(name).print()
    print(flush=True)


def dump_detailed(store, events):
  """Dump the complete event contents for all desired events"""
  for ievt in events:
    event = store[ievt]
    dump_evt_detailed(event, ievt)
    print()


def main(args):
  """Main"""
  store = EventStore([args.inputfile])
  if args.detailed:
    dump_detailed(store, args.event)
  else:
    dump_overview(store, args.event)


def parse_evt_range(evt_string):
  """Parse which events to print"""
  try:
    return [int(evt_string)]
  except ValueError:
    pass

  try:
    return [int(i) for i in evt_string.split(',')]
  except ValueError:
    pass

  try:
    first, last = [int(i) for i in evt_string.split(':')]
    return list(range(first, last + 1))
  except ValueError:
    pass

  raise argparse.ArgumentTypeError(f'\'{evt_string}\' cannot be parsed into a list of events')


if __name__ == '__main__':
  import argparse
  # pylint: disable=invalid-name # before 2.5.0 pylint is too strict with the naming here
  parser = argparse.ArgumentParser(description='Dump contents of a podio file to stdout')
  parser.add_argument('inputfile', help='Name of the file to dump content from')
  parser.add_argument('-e', '--event',
                      help='Which event(s) to print. A single number, comma separated list of numbers'
                      ' or "first:last" for an inclusive range of events. Defaults to the first event.',
                      type=parse_evt_range, default=[0])
  parser.add_argument('-d', '--detailed', help='Dump the full event contents not just the collection info',
                      action='store_true', default=False)

  clargs = parser.parse_args()
  main(clargs)
