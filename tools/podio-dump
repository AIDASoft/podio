#!/usr/bin/env python3
"""podio-dump tool to dump contents of podio files"""

import sys
import json
import yaml

from podio.reading import get_reader


def print_general_info(reader, filename):
  """Print an overview of the file contents at the very beginning.

  This prints things like the available categories (and how many entries they
  have) as well as the filename, etc.

  Args:
      reader (root_io.Reader, sio_io.Reader): An initialized reader
  """
  legacy_text = ' (this is a legacy file!)' if reader.is_legacy else ''
  print(f'input file: {filename}{legacy_text}\n')
  print(f'datamodel model definitions stored in this file: {", ".join(reader.datamodel_definitions)}')
  print()
  print('Frame categories in this file:')
  print(f'{"Name":<20} {"Entries":<10}')
  print('-' * 31)
  for category in reader.categories:
    print(f'{category:<20} {len(reader.get(category)):<10}')
  print()


def print_frame(frame, cat_name, ientry, detailed):
  """Print a Frame overview.

  Args:
      frame (podio.Frame): The frame to print
      cat_name (str): The category name
      ientry (int): The entry number of this Frame
      detailed (bool): Print just an overview or dump the whole contents
  """
  print('{:#^82}'.format(f' {cat_name} {ientry} '))  # pylint: disable=consider-using-f-string
  print('Collections:')

  if not detailed:
    print(f'{"Name":<38} {"ID":<4} {"Type":<32} {"Size":<10}')
    print('-' * 82)

  # Print collections
  for name in frame.collections:
    coll = frame.get(name)
    if detailed:
      print(name, flush=True)
      coll.print()
      print(flush=True)
    else:
      print(f'{name:<38} {coll.getID():<4} {coll.getValueTypeName().data():<32} {len(coll):<10}')

  # And then parameters
  print('\nParameters:', flush=True)
  if detailed:
    frame.get_parameters().print()
    print(flush=True)
  else:
    print(f'{"Name":<30} {"Type":<12} {"Elements":<10}')
    print('-' * 54)
    for name in frame.parameters:
      par_infos = frame.get_param_info(name)
      for par_type, n_pars in par_infos.items():
        print(f'{name:<30} {par_type:<12} {n_pars:<10}')

  # Additional new line before the next entry
  print('\n', flush=True)


def dump_model(reader, model_name):
  """Dump the model in yaml format"""
  if model_name not in reader.datamodel_definitions:
    print(f'ERROR: Cannot dump model \'{model_name}\' (not present in file)')
    return False

  model_def = json.loads(reader.get_datamodel_definition(model_name))
  print(yaml.dump(model_def, sort_keys=False, default_flow_style=False))

  return True


def main(args):
  """Main"""
  try:
    reader = get_reader(args.inputfile)
  except ValueError as err:
    print(f'ERROR: Cannot open file \'{args.inputfile}\': {err}')
    sys.exit(1)

  if args.dump_edm is not None:
    if dump_model(reader, args.dump_edm):
      sys.exit(0)
    else:
      sys.exit(1)

  print_general_info(reader, args.inputfile)
  if args.category not in reader.categories:
    print(f'ERROR: Cannot print category \'{args.category}\' (not present in file)')
    sys.exit(1)

  frames = reader.get(args.category)
  for ient in args.entries:
    print_frame(frames[ient], args.category, ient, args.detailed)


def parse_entry_range(ent_string):
  """Parse which entries to print"""
  try:
    return [int(ent_string)]
  except ValueError:
    pass

  try:
    return [int(i) for i in ent_string.split(',')]
  except ValueError:
    pass

  try:
    first, last = [int(i) for i in ent_string.split(':')]
    return list(range(first, last + 1))
  except ValueError:
    pass

  raise argparse.ArgumentTypeError(f'\'{ent_string}\' cannot be parsed into a list of entries')


if __name__ == '__main__':
  import argparse
  # pylint: disable=invalid-name # before 2.5.0 pylint is too strict with the naming here
  parser = argparse.ArgumentParser(description='Dump contents of a podio file to stdout')
  parser.add_argument('inputfile', help='Name of the file to dump content from')
  parser.add_argument('-c', '--category', help='Which Frame category to dump',
                      default='events', type=str)
  parser.add_argument('-e', '--entries',
                      help='Which entries to print. A single number, comma separated list of numbers'
                      ' or "first:last" for an inclusive range of entries. Defaults to the first entry.',
                      type=parse_entry_range, default=[0])
  parser.add_argument('-d', '--detailed', help='Dump the full contents not just the collection info',
                      action='store_true', default=False)
  parser.add_argument('--dump-edm',
                      help='Dump the specified EDM definition from the file in yaml format',
                      type=str, default=None)

  clargs = parser.parse_args()
  main(clargs)
