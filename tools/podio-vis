#!/usr/bin/env python3
'''Tool to transform data model descriptions in YAML to a graph that can be visualized'''

import argparse
import yaml
from podio.podio_config_reader import PodioConfigReader
from graphviz import Digraph

class ModelToGraphviz:
  """Class to transform a data model description into a graphical representation"""

  def __init__(self, yamlfile, target, dot, fmt, filename, extra_input):
    self.yamlfile = yamlfile
    self.target = target
    self.use_dot = dot
    self.datamodel = PodioConfigReader.read(yamlfile, 'podio')
    self.graph = Digraph(node_attr={'shape': 'box'})
    self.graph.attr(rankdir='RL', size='8,5')
    self.fmt = fmt
    self.filename = filename
    self.extra_input = {}
    self.remove = set()
    if extra_input:
      self.extra_input = yaml.safe_load(open(extra_input))
    if 'Filter' in self.extra_input:
      self.remove = set(self.extra_input['Filter'])

  def make_viz(self):
    '''Make the graph and render it in the chosen format'''

    # Make the grouped nodes first
    # It doesn't matter if they are remade latter so we don't need
    # to check for that
    for i, (label, group) in enumerate(self.extra_input.items()):
      with self.graph.subgraph(name=f'cluster{i+1}') as c:
        c.attr(label=label)
        for name in group:
          if name in self.remove:
            continue
          c.node(name.replace('::', '_'), label=name)

    with_association = False
    for name, datatype in self.datamodel.datatypes.items():
      if name in self.remove:
        continue
      if 'Association' in name:
        with_association = True
        print(name)
        # print(datatype['OneToOneRelations'][0].full_type)
        self.graph.edge(datatype['OneToOneRelations'][0].full_type.replace('::', '_'), 
               datatype['OneToOneRelations'][1].full_type.replace('::', '_'),
                        label=name.replace('edm4hep::', ''), color='black', dir='both')
        continue

      compatible_name = name.replace('::', '_')  # graphviz gets confused with C++ '::' and formatting strings
      self.graph.node(compatible_name, label=name)
      self.graph.attr('edge', color='blue')
      for rel in datatype["OneToOneRelations"]:
        if rel.full_type in self.remove:
          continue
        compatible_type = rel.full_type.replace('::', '_')
        self.graph.edge(compatible_name, compatible_type)
      self.graph.attr('edge', color='red')
      for rel in datatype["OneToManyRelations"]:
        if rel.full_type in self.remove:
          continue
        compatible_type = rel.full_type.replace('::', '_')
        self.graph.edge(compatible_name, compatible_type)

    with self.graph.subgraph(name='cluster0') as subg:
      labels = ['One to One Relation', 'One to Many Relation', 'Association']
      max_length = max(map(len, labels))
      subg.attr('node', shape='plaintext')
      subg.node('l1', '')
      subg.node('r1', f'{labels[0]:{max_length}}')
      subg.edge('l1', 'r1', color='blue')
      subg.node('l2', '')
      subg.node('r2', f'{labels[1]:{max_length}}')
      subg.edge('l2', 'r2', color='red')
      if with_association:
        subg.node('r3', f'{labels[2]:{max_length}}')
        subg.node('l3', '')
        subg.edge('l3', 'r3', color='black', dir='both')

    if self.use_dot:
      self.graph.save()
    else:
      print(f'Saving file {self.filename} and {self.filename}.{self.fmt}')
      self.graph.render(filename=self.filename, format=self.fmt, renderer='cairo')


if __name__ == "__main__":
  parser = argparse.ArgumentParser(description='Given a description yaml file this script generates '
                                   'a visualization in the target directory')

  parser.add_argument('description', help='yaml file describing the datamodel')
  parser.add_argument('target', help='name of the file to be created')
  parser.add_argument('-d', '--dot', action='store_true', default=False,
                      help='just write the dot file')
  parser.add_argument('--fmt', default='svg', help='Which format to use for saving the file')
  parser.add_argument('--filename', default='gv', help='Which filename to use for the output')
  parser.add_argument('--extra-input', help='Extra input file for defining groups')

  args = parser.parse_args()

  vis = ModelToGraphviz(args.description, args.target, args.dot, fmt=args.fmt,
                        filename=args.filename, extra_input=args.extra_input)
  vis.make_viz()
