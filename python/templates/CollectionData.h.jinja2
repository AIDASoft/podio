{% import "macros/utils.jinja2" as utils %}
// AUTOMATICALLY GENERATED FILE - DO NOT EDIT

#ifndef {{ package_name.upper() }}_{{ class.bare_type }}_CollectionData_H
#define {{ package_name.upper() }}_{{ class.bare_type }}_CollectionData_H

// datamodel specific includes
#include "{{ incfolder }}{{ class.bare_type }}Data.h"
#include "{{ incfolder }}{{ class.bare_type }}Obj.h"
{% for include in includes_coll_data %}
{{ include }}
{% endfor %}

// podio specific includes
#include "podio/CollectionBuffers.h"
#include "podio/ICollectionProvider.h"

#include <deque>
#include <memory>

{{ utils.namespace_open(class.namespace) }}

using {{ class.bare_type }}ObjPointerContainer = std::deque<{{ class.bare_type }}Obj*>;
using {{ class.bare_type }}DataContainer = std::vector<{{ class.bare_type }}Data>;


/**
 * Class encapsulating everything related to storage of data that is needed by a
 * collection.
 */
{% with class_type = class.bare_type + 'CollectionData' %}
class {{ class.bare_type }}CollectionData {
public:
  /**
   * The Objs of this collection
   */
  {{ class.bare_type }}ObjPointerContainer entries{};

  /**
   * Default constructor setting up the necessary buffers
   */
  {{ class_type }}();

  /**
   * Non copy-able, move-only class
   */
  {{ class_type }}(const {{ class_type }}&) = delete;
  {{ class_type }}& operator=(const {{ class_type }}&) = delete;
  {{ class_type }}({{ class_type }}&& other) = default;
  {{ class_type }}& operator=({{ class_type }}&& other) = default;

  /**
   * Deconstructor
   */
  ~{{ class_type }}() = default;

  void clear(bool isSubsetColl);

  podio::CollectionBuffers getCollectionBuffers(bool isSubsetColl);

  void prepareForWrite(bool isSubsetColl);

  void prepareAfterRead(int collectionID);

  void makeSubsetCollection();

{% if OneToManyRelations or VectorMembers %}
  void createRelations({{ class.bare_type }}Obj* obj);
{% endif %}

  bool setReferences(const podio::ICollectionProvider* collectionProvider, bool isSubsetColl);

private:
  // members to handle 1-to-N-relations
{% for relation in OneToManyRelations %}
  podio::UVecPtr<{{ relation.namespace }}::{{ relation.bare_type }}> m_rel_{{ relation.name }};  ///< Relation buffer for read / write
  std::vector<podio::UVecPtr<{{ relation.namespace }}::{{ relation.bare_type }}>> m_rel_{{ relation.name }}_tmp{}; ///< Relation buffer for internal book-keeping
{% endfor %}
{% for relation in OneToOneRelations %}
  podio::UVecPtr<{{ relation.namespace }}::{{ relation.bare_type }}> m_rel_{{ relation.name }}; ///< Relation buffer for read / write
{% endfor %}

  // members to handle vector members
{% for member in VectorMembers %}
  podio::UVecPtr<{{ member.full_type }}> m_vec_{{ member.name }}; /// combined vector of all objects in collection
  std::vector<podio::UVecPtr<{{ member.full_type }}>> m_vecs_{{ member.name }}{}; /// pointers to individual member vectors
{% endfor %}

  // I/O related buffers
  podio::CollRefCollection m_refCollections{};
  podio::VectorMembersInfo m_vecmem_info{};
  std::unique_ptr<{{ class.bare_type }}DataContainer> m_data{nullptr};
};
{% endwith %}


{{ utils.namespace_close(class.namespace) }}

#endif
