{% import "macros/utils.jinja2" as utils %}
{% import "macros/collections.jinja2" as macros %}
{% from "macros/iterator.jinja2" import iterator_definitions %}
// AUTOMATICALLY GENERATED FILE - DO NOT EDIT

#include "{{ incfolder }}{{ class.bare_type }}Collection.h"

{% for include in includes_coll_cc %}
{{ include }}
{% endfor %}

// standard includes
#include <stdexcept>
#include <iomanip>

{{ utils.namespace_open(class.namespace) }}

{% with collection_type = class.bare_type + 'Collection' %}
{{ collection_type }}::{{ collection_type }}() :
  m_isValid(false), m_isReadFromFile(false), m_isSubsetColl(false), m_collectionID(0), m_storage() {}

{{ collection_type }}::~{{ collection_type }}() {
  clear();
}

Const{{ class.bare_type }} {{ collection_type }}::operator[](unsigned int index) const {
  return Const{{ class.bare_type }}(m_storage.entries[index]);
}

Const{{ class.bare_type }} {{ collection_type }}::at(unsigned int index) const {
  return Const{{ class.bare_type }}(m_storage.entries.at(index));
}

{{ class.bare_type }} {{ collection_type }}::operator[](unsigned int index) {
  return {{ class.bare_type }}(m_storage.entries[index]);
}

{{ class.bare_type }} {{ collection_type }}::at(unsigned int index) {
  return {{ class.bare_type }}(m_storage.entries.at(index));
}

size_t {{ collection_type }}::size() const {
  return m_storage.entries.size();
}

void {{ collection_type }}::setSubsetCollection(bool setSubset) {
  if (m_isSubsetColl != setSubset && !m_storage.entries.empty()) {
    throw std::logic_error("Cannot change the character of a collection that already contains elements");
  }

  if (setSubset) {
    m_storage.makeSubsetCollection();
  }
  m_isSubsetColl = setSubset;
}

{{ class.bare_type }} {{ collection_type }}::create() {
  if (m_isSubsetColl) {
    throw std::logic_error("Cannot create new elements on a subset collection");
  }

  auto obj = m_storage.entries.emplace_back(new {{ class.bare_type }}Obj());
{% if OneToManyRelations or VectorMembers %}
  m_storage.createRelations(obj);
{% endif %}

  obj->id = {int(m_storage.entries.size() - 1), m_collectionID};
  return {{ class.bare_type }}(obj);
}

void {{ collection_type }}::clear() {
  m_storage.clear(m_isSubsetColl);
}

void {{ collection_type }}::prepareForWrite() {
  // If the collection has been read from a file, there is nothing to do here
  if (m_isReadFromFile) return;
  m_storage.prepareForWrite(m_isSubsetColl);
}

void {{ collection_type }}::prepareAfterRead() {
  // No need to go through this again if we have already done it
  if (m_isReadFromFile) return;

  if (!m_isSubsetColl) {
    // Subset collections do not store any data that would require post-processing
    m_storage.prepareAfterRead(m_collectionID);
  }
  m_isReadFromFile = true;
}

bool {{ collection_type }}::setReferences(const podio::ICollectionProvider* {% if OneToManyRelations or OneToOneRelations -%}collectionProvider{%- endif -%}) {
{% if OneToManyRelations or OneToOneRelations %}
  m_storage.setReferences(collectionProvider, m_isSubsetColl);
{% endif %}

  return true; //TODO: check success
}

void {{ collection_type }}::push_back(Const{{ class.bare_type }} object) {
  // We have to do different things here depending on whether this is a
  // subset collection or not. A normal collection cannot collect objects
  // that are already part of another collection, while a subset collection
  // can only collect such objects
  if (!m_isSubsetColl) {
    auto obj = object.m_obj;
    if (obj->id.index == podio::ObjectID::untracked) {
      const auto size = m_storage.entries.size();
      obj->id = {(int)size, m_collectionID};
      m_storage.entries.push_back(obj);
{% if OneToManyRelations or VectorMembers %}
      m_storage.createRelations(obj);
{% endif %}
    } else {
      throw std::invalid_argument("Object already in a collection. Cannot add it to a second collection");
    }
  } else {
    const auto obj = object.m_obj;
    if (obj->id.index < 0) {
      throw std::invalid_argument("Object needs to be tracked by another collection in order for it to be storable in a subset collection");
    }
    m_storage.entries.push_back(obj);
    // No need to handle any relations here, since this is already done by the
    // "owning" collection
  }
}

podio::CollectionBuffers {{ collection_type }}::getBuffers() {
  return m_storage.getCollectionBuffers(m_isSubsetColl);
}

// void {{ collection_type }}::setBuffers(const podio::CollectionBuffers& buffers) {
//   if (m_storage.data) delete m_storage.data;
//   m_storage.data = static_cast<{{ class.bare_type }}DataContainer*>(buffers.data);

//   m_storage.vecmem_info = std::move(*buffers.vectorMembers);
//   m_storage.refCollections = std::move(*buffers.references);
// }
{% endwith %}

{{ iterator_definitions(class) }}

{{ iterator_definitions(class, prefix='Const' ) }}

{{ macros.ostream_operator(class, Members, OneToOneRelations, OneToManyRelations, VectorMembers, use_get_syntax, ostream_collection_settings) }}

{{ utils.namespace_close(class.namespace) }}
