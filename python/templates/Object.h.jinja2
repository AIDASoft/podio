{% import "macros/declarations.jinja2" as macros %}
{% import "macros/utils.jinja2" as utils %}
// AUTOMATICALLY GENERATED FILE - DO NOT EDIT

#ifndef {{ package_name.upper() }}_{{ class.bare_type }}_H
#define {{ package_name.upper() }}_{{ class.bare_type }}_H

#include "{{ incfolder }}{{ class.bare_type }}Obj.h"

{% for include in includes %}
{{ include }}
{% endfor %}

#include "podio/utilities/MaybeSharedPtr.h"

#include <ostream>
#include <cstddef>

#if defined(PODIO_JSON_OUTPUT) && !defined(__CLING__)
#include "nlohmann/json_fwd.hpp"
#endif

{{ utils.forward_decls(forward_declarations) }}

{{ utils.namespace_open(class.namespace) }}
class Mutable{{ class.bare_type }};
class {{ class.bare_type }}Collection;
class {{ class.bare_type }}CollectionData;

{{ macros.class_description(class.bare_type, Description, Author) }}
class {{ class.bare_type }} {

  friend class Mutable{{ class.bare_type }};
  friend class {{ class.bare_type }}Collection;
  friend class {{ class.full_type }}CollectionData;
  friend class {{ class.bare_type }}CollectionIterator;

public:
  using mutable_type = Mutable{{ class.bare_type }};
  using collection_type = {{ class.bare_type }}Collection;

{{ macros.common_constructors_destructors(class.bare_type, Members) }}

  static {{ class.bare_type }} makeEmpty();

public:

{{ macros.member_getters(Members, use_get_syntax) }}
{{ macros.single_relation_getters(OneToOneRelations, use_get_syntax) }}
{{ macros.multi_relation_handling(OneToManyRelations + VectorMembers, use_get_syntax) }}
{{ utils.if_present(ExtraCode, "declaration") }}
{{ macros.common_object_funcs(class.bare_type) }}

  /// disconnect from {{ class.bare_type }}Obj instance
  void unlink() { m_obj = podio::utils::MaybeSharedPtr<{{ class.bare_type }}Obj>{nullptr}; }

private:
  /// constructor from existing {{ class.bare_type }}Obj
  explicit {{ class.bare_type}}(podio::utils::MaybeSharedPtr<{{ class.bare_type }}Obj> obj);
  {{ class.bare_type}}({{ class.bare_type }}Obj* obj);

  podio::utils::MaybeSharedPtr<{{ class.bare_type }}Obj> m_obj{nullptr};
};

std::ostream& operator<<(std::ostream& o, const {{ class.bare_type }}& value);

{{ macros.json_output(class.bare_type) }}

{{ utils.namespace_close(class.namespace) }}

#endif
