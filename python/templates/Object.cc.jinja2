{% import "macros/utils.jinja2" as utils %}
{% import "macros/implementations.jinja2" as macros %}
// AUTOMATICALLY GENERATED FILE - DO NOT EDIT

{{ utils.datamodel_includes(incfolder, class.bare_type) }}

{% for include in includes_cc %}
{{ include }}
{% endfor %}

#include <ostream>

{{ utils.namespace_open(class.namespace) }}

{{ macros.common_constructors_destructors(class.bare_type, Members) }}

{{ class.bare_type }}::{{ class.bare_type }}() : m_obj(new {{ class.bare_type }}Obj(), podio::MarkOwned) {}

{{ class.bare_type }} {{ class.bare_type }}::clone() const {
  return {{ class.bare_type }}{podio::MaybeSharedPtr(new {{ class.bare_type }}Obj(*m_obj), podio::MarkOwned)};
}

{% if Members %}
{{ class.bare_type }}::{{ class.bare_type }}({{ Members | map(attribute='signature') | join(', ') }}) : m_obj(new {{ class.bare_type }}Obj(), podio::MarkOwned) {
{% for member in Members %}
  m_obj->data.{{ member.name }} = {{ member.name }};
{% endfor %}
}
{% endif %}

{{ class.bare_type }}::{{ class.bare_type }}(podio::MaybeSharedPtr<{{ class.bare_type }}Obj> obj) : m_obj(obj) {}

{{ class.bare_type }}::operator Const{{ class.bare_type }}() const { return Const{{ class.bare_type }}(m_obj.get()); }

{{ macros.member_getters(class, Members, use_get_syntax) }}
{{ macros.single_relation_getters(class, OneToOneRelations, use_get_syntax) }}
{{ macros.member_setters(class, Members, use_get_syntax) }}
{{ macros.single_relation_setters(class, OneToOneRelations, use_get_syntax) }}
{{ macros.multi_relation_handling(class, OneToManyRelations + VectorMembers, use_get_syntax, with_adder=True) }}

{{ utils.if_present_with_replacement(ExtraCode, "implementation", '{name}', class.bare_type) }}
{{ utils.if_present_with_replacement(ConstExtraCode, "implementation", '{name}', class.bare_type) }}

{{ macros.common_object_funcs(class) }}

{{ macros.ostream_operator(class.bare_type, Members,
                           OneToOneRelations, OneToManyRelations + VectorMembers,
                           use_get_syntax) }}

{{ utils.namespace_close(class.namespace) }}
