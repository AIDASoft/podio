{% import "macros/declarations.jinja2" as macros %}
{% import "macros/utils.jinja2" as utils %}
// AUTOMATICALLY GENERATED FILE - DO NOT EDIT

#ifndef {{ package_name.upper() }}_{{ class.bare_type }}_H
#define {{ package_name.upper() }}_{{ class.bare_type }}_H

{% for include in includes %}
{{ include }}
{% endfor %}
#include <ostream>

#if defined(PODIO_JSON_OUTPUT) && !defined(__CLING__)
#include "nlohmann/json_fwd.hpp"
#endif

{{ utils.namespace_open(class.namespace) }}

{{ macros.class_description(class.bare_type, Description, Author) }}
class {{ class.bare_type }} {
public:
{% for member in Members %}
  {{ member }}
{% endfor %}

{{ utils.if_present(ExtraCode, "declaration") }}
};

std::ostream& operator<<(std::ostream& o, const {{ class.bare_type }}& value);

#if defined(PODIO_JSON_OUTPUT) && !defined(__CLING__)
void to_json(nlohmann::json& j, const {{ class.bare_type }}& value);
#endif

namespace v{{ schema_version }} {
using {{ class.bare_type }} = {{ class.full_type }};
} // namespace v{{ schema_version }}

{% if old_versions %}
// Definitions for older versions
{% endif %}
{% for old_version in old_versions %}
namespace v{{ old_version.version }} {

class {{ class.bare_type }} {
public:
{% for member in old_version.definition.Members %}
  {{ member }}
{% endfor %}
};

} // namespace v{{ old_version.version }}
{% endfor %}

{{ utils.namespace_close(class.namespace) }}

#endif
