{% import "macros/utils.jinja2" as utils %}
{% import "macros/declarations.jinja2" as macros %}
// AUTOMATICALLY GENERATED FILE - DO NOT EDIT

#include "{{ incfolder }}{{ class.bare_type }}Const.h"
{% for include in include_types %}
{{ include }}
{% endfor %}

#include "podio/GenericWrapper.h"

#ifndef {{ package_name.upper() }}_{{ class.bare_type }}_H
#define {{ package_name.upper() }}_{{ class.bare_type }}_H

{{ utils.namespace_open(class.namespace) }}

{{ macros.class_description(class.bare_type, Description, Author )}}

{{ utils.namespace_close(class.namespace )}}
class {{ class.bare_type }} : public podio::GenericWrapper<{{ Types | join(', ') }}> {
private:
  using WrapperT = podio::GenericWrapper<{{ Types | join(', ')}}>;
public:
  /// A {{ class.bare_type }} can only be constructed from a concrete value
  {{ class.bare_type }}() = delete;

  /// The default constructor takes anything that can be converted into this type
  template<typename T,
           WrapperT::EnableWrapper<T> = false>
  {{ class.bare_type }}(T&& val) : WrapperT(std::forward<T>(val)) {}

  /// Constructor from another {{ class.bare_type }}
  {{ class.bare_type }}({{ class.bare_type }} const& other) : WrapperT(other.m_obj) {}

  /// The class can also get initialized from another wrapper of the same type
  {{ class.bare_type }}(WrapperT const& other) : WrapperT(other) {}

{{ macros.member_getters(Members, use_get_syntax) }}
{{ macros.member_setters(Members, use_get_syntax) }}
};

#endif
