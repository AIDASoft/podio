{% import "macros/utils.jinja2" as utils %}
{% import "macros/collections.jinja2" as macros %}
{% from "macros/iterator.jinja2" import iterator_declaration %}
// AUTOMATICALLY GENERATED FILE - DO NOT EDIT

#ifndef {{ package_name.upper() }}_{{ class.bare_type }}Collection_H
#define {{ package_name.upper() }}_{{ class.bare_type }}Collection_H

// datamodel specific includes
#include "{{ incfolder }}{{ class.bare_type }}Data.h"
#include "{{ incfolder }}{{ class.bare_type }}.h"
#include "{{ incfolder }}Mutable{{ class.bare_type }}.h"
#include "{{ incfolder }}{{ class.bare_type }}Obj.h"
#include "{{ incfolder }}{{ class.bare_type }}CollectionData.h"

// podio specific includes
#include "podio/ICollectionProvider.h"
#include "podio/CollectionBase.h"
#include "podio/CollectionIDTable.h"

#ifdef PODIO_JSON_OUTPUT
#include "nlohmann/json.hpp"
#endif

#include <string>
#include <vector>
#include <deque>
#include <array>
#include <algorithm>
#include <ostream>
#include <mutex>
#include <memory>

{{ utils.namespace_open(class.namespace) }}


{{ iterator_declaration(class) }}

{{ iterator_declaration(class, prefix='Mutable') }}

/**
A Collection is identified by an ID.
*/
class {{ class.bare_type }}Collection : public podio::CollectionBase {
public:
  using const_iterator = {{ class.bare_type }}CollectionIterator;
  using iterator = {{ class.bare_type }}MutableCollectionIterator;

  {{ class.bare_type }}Collection();
  {{ class.bare_type }}Collection({{ class.bare_type }}CollectionData&& data, bool isSubsetColl);
  // This is a move-only type
  {{ class.bare_type }}Collection(const {{ class.bare_type}}Collection& ) = delete;
  {{ class.bare_type }}Collection& operator=(const {{ class.bare_type}}Collection& ) = delete;
  {{ class.bare_type }}Collection({{ class.bare_type }}Collection&&) = default;
  {{ class.bare_type }}Collection& operator=({{ class.bare_type }}Collection&&) = default;

//  {{ class.bare_type }}Collection({{ class.bare_type }}Vector* data, int collectionID);
  ~{{ class.bare_type }}Collection();

  void clear() final;

  /// Print this collection to the passed stream
  void print(std::ostream& os=std::cout, bool flush=true) const final;

  /// operator to allow pointer like calling of members a la LCIO
  {{ class.bare_type }}Collection* operator->() { return ({{ class.bare_type }}Collection*) this; }

  /// Append a new object to the collection, and return this object.
  Mutable{{ class.bare_type }} create();

  /// Append a new object to the collection, and return this object.
  /// Initialized with the parameters given
  template<typename... Args>
  Mutable{{ class.bare_type }} create(Args&&... args);

  /// number of elements in the collection
  size_t size() const final;

  /// fully qualified type name
  std::string getTypeName() const final { return std::string("{{ (class | string ).strip(':')+"Collection" }}"); }
  /// fully qualified type name of elements - with namespace
  std::string getValueTypeName() const final { return std::string("{{ (class | string ).strip(':') }}"); }
  /// fully qualified type name of stored POD elements - with namespace
  std::string getDataTypeName() const final { return std::string("{{ (class | string ).strip(':')+"Data" }}"); }
  /// schema version
  unsigned int getSchemaVersion() const final { return {{ class.schema_version }}; };

  bool isSubsetCollection() const final {
    return m_isSubsetColl;
  }

  void setSubsetCollection(bool setSubset=true) final;

  /// Returns the const object of given index
  {{ class.bare_type }} operator[](unsigned int index) const;
  /// Returns the object of a given index
  Mutable{{ class.bare_type }} operator[](unsigned int index);
  /// Returns the const object of given index
  {{ class.bare_type }} at(unsigned int index) const;
  /// Returns the object of given index
  Mutable{{ class.bare_type }} at(unsigned int index);


  /// Append object to the collection
  void push_back({{class.bare_type}} object);

  void prepareForWrite() const final;
  void prepareAfterRead() final;
  bool setReferences(const podio::ICollectionProvider* collectionProvider) final;

  /// Get the collection buffers for this collection
  podio::CollectionWriteBuffers getBuffers() final;

  /// Create (empty) collection buffers from which a collection can be constructed
  podio::CollectionReadBuffers createBuffers() /*const*/ final;

  /// Create (empty) collection buffers from which a collection can be constructed
  /// Versioned to support schema evolution
  podio::CollectionReadBuffers createSchemaEvolvableBuffers(int readSchemaVersion, podio::Backend backend) /*const*/ final;


  void setID(unsigned ID) final {
    m_collectionID = ID;
    if (!m_isSubsetColl) {
      std::for_each(m_storage.entries.begin(), m_storage.entries.end(),
                  [ID] ({{ class.bare_type }}Obj* obj) { obj->id = {obj->id.index, static_cast<int>(ID)}; }
      );
    }
    m_isValid = true;
  };

  unsigned getID() const final {
    return m_collectionID;
  }

  bool isValid() const final {
    return m_isValid;
  }

  // support for the iterator protocol
  iterator begin() {
    return iterator(0, &m_storage.entries);
  }
  const_iterator begin() const {
    return const_iterator(0, &m_storage.entries);
  }
  iterator end() {
    return iterator(m_storage.entries.size(), &m_storage.entries);
  }
  const_iterator end() const {
    return const_iterator(m_storage.entries.size(), &m_storage.entries);
  }

{% for member in Members %}
  std::vector<{{ member.full_type }}> {{ member.name }}(const size_t nElem = 0) const;
{% endfor %}

private:
  // For setReferences, we need to give our own CollectionData access to our
  // private entries. Otherwise we would need to expose a public member function
  // that gives access to the Obj* which is definitely not what we want
  friend class {{ class.bare_type }}CollectionData;

  bool m_isValid{false};
  mutable bool m_isPrepared{false};
  bool m_isSubsetColl{false};
  int m_collectionID{0};
  mutable std::unique_ptr<std::mutex> m_storageMtx{nullptr};
  mutable {{ class.bare_type }}CollectionData m_storage{};
};

std::ostream& operator<<(std::ostream& o, const {{ class.bare_type }}Collection& v);

template<typename... Args>
Mutable{{ class.bare_type }} {{ class.bare_type }}Collection::create(Args&&... args) {
  if (m_isSubsetColl) {
    throw std::logic_error("Cannot create new elements on a subset collection");
  }
  const int size = m_storage.entries.size();
  auto obj = new {{ class.bare_type }}Obj({size, m_collectionID}, {std::forward<Args>(args)...});
  m_storage.entries.push_back(obj);

{% if OneToManyRelations or VectorMembers %}
  // Need to initialize the relation vectors manually for the {ObjectID, {{class.bare_type}}Data} constructor
{% for relation in OneToManyRelations + VectorMembers %}
  obj->m_{{ relation.name }} = new std::vector<{{ relation.full_type }}>();
{% endfor %}
  m_storage.createRelations(obj);
{% endif %}
  return Mutable{{ class.bare_type }}(obj);
}

#ifdef PODIO_JSON_OUTPUT
void to_json(nlohmann::json& j, const {{ class.bare_type }}Collection& collection);
#endif

{{ utils.namespace_close(class.namespace) }}

#endif
