{% import "macros/julia_helpers.jinja2" as julia_helpers %}
{% if upstream_edm %}
include("{{ upstream_edm.options["includeSubfolder"] }}{{ upstream_edm_name }}.jl")
{% endif %}

module {{ class.bare_type }}
{% for component in components %}
export {{ component['class'].bare_type }}
{% endfor %}
{% for datatype in datatypes %}
export {{ datatype['class'].bare_type }}
export {{ datatype['class'].bare_type }}Collection
{% endfor %}

{% if upstream_edm %}
import ..{{ upstream_edm_name }}
{% endif %}

{% if static_arrays_import %}
try
    using StaticArrays
catch
    import Pkg
    Pkg.activate(@__DIR__)
    Pkg.add("StaticArrays")
    using StaticArrays
end
{% endif %}
{% for sort_include in includes %}
include("{{ sort_include }}Struct.jl")
{% endfor %}

{% for component in components %}
function {{ component['class'].bare_type }}(
{% for member in component['Members'] %}
	{% if member.is_array %}
	{% if member.is_builtin_array %}
	{{ member.name }}::{{ member.julia_type }} = {{ member.julia_type }}(undef),
	{% else %}
	{% if upstream_edm and (member.array_type in upstream_edm.components or member.array_type in upstream_edm.datatypes) %}
	{{ member.name }}::MVector{{ '{' }}{{ member.array_size }}, {{ upstream_edm_name }}.{{ member.array_bare_type }}Struct{{ '}' }} = MVector{{ '{' }}{{ member.array_size }}, {{ upstream_edm_name }}.{{ member.array_bare_type }}Struct{{ '}' }}(undef),
	{% else %}
	{{ member.name }}::{{ member.julia_type }} = {{ member.julia_type }}(undef),
	{% endif %}
	{% endif %}
	{% elif member.is_builtin %}
	{{ member.name }}::{{ julia_helpers.classify_data_type(member.julia_type) }} = {{ member.julia_type }}(0),
	{% else %}
	{% if upstream_edm and (member.full_type in upstream_edm.components or member.full_type in upstream_edm.datatypes) %}
	{{ member.name }}::{{ upstream_edm_name }}.{{ member.julia_type }}Struct = {{ upstream_edm_name }}.{{ member.julia_type }}(),
	{% else %}
	{{ member.name }}::{{ member.julia_type }}Struct = {{ member.julia_type }}(),
	{% endif %}
	{% endif %}
{% endfor %}
)
	return {{ component['class'].bare_type }}Struct{{ julia_helpers.julia_parameters(component['params_jl'], "Struct", upstream_edm, upstream_edm_name) }}(
	{% for member in component['Members'] %}
	{% if member.is_builtin %}
	{{ member.julia_type }}({{ member.name }}),
	{% else %}
	{{ member.name }},
	{% endif %}
	{% endfor %}
	)
end

{% endfor %}

{% for datatype in datatypes %}
function {{ datatype['class'].bare_type }}(
{% for member in datatype['Members'] %}
	{% if member.is_array %}
	{% if member.is_builtin_array %}
	{{ member.name }}::{{ member.julia_type }} = {{ member.julia_type }}(undef),
	{% else %}
	{% if upstream_edm and (member.array_type in upstream_edm.components or member.array_type in upstream_edm.datatypes) %}
	{{ member.name }}::MVector{{ '{' }}{{ member.array_size }}, {{ upstream_edm_name }}.{{ member.array_bare_type }}Struct{{ '}' }} = MVector{{ '{' }}{{ member.array_size }}, {{ upstream_edm_name }}.{{ member.array_bare_type }}Struct{{ '}' }}(undef),
	{% else %}
	{{ member.name }}::{{ member.julia_type }} = {{ member.julia_type }}(undef),
	{% endif %}
	{% endif %}
	{% elif member.is_builtin %}
	{{ member.name }}::{{ julia_helpers.classify_data_type(member.julia_type) }} = {{ member.julia_type }}(0),
	{% else %}
	{% if upstream_edm and (member.full_type in upstream_edm.components or member.full_type in upstream_edm.datatypes) %}
	{{ member.name }}::{{ upstream_edm_name }}.{{ member.julia_type }}Struct = {{ upstream_edm_name }}.{{ member.julia_type }}(),
	{% else %}
	{{ member.name }}::{{ member.julia_type }}Struct = {{ member.julia_type }}(),
	{% endif %}
	{% endif %}
{% endfor %}
{% for relation in datatype['OneToManyRelations'] %}
	{% if upstream_edm and (relation.full_type in upstream_edm.components or relation.full_type in upstream_edm.datatypes) %}
	{{ relation.name }}::Vector{ {{ upstream_edm_name }}.{{ relation.julia_type }}Struct } = Vector{ {{ upstream_edm_name }}.{{ relation.julia_type }}Struct }(),
	{% else %}
	{{ relation.name }}::Vector{ {{ relation.julia_type }}Struct } = Vector{ {{ relation.julia_type }}Struct }(),
	{% endif %}
{% endfor %}
{% for relation in datatype['OneToOneRelations'] %}
	{% if upstream_edm and (relation.full_type in upstream_edm.components or relation.full_type in upstream_edm.datatypes) %}
	{{ relation.name }}::Union{Nothing, {{ upstream_edm_name }}.{{ relation.julia_type }}Struct } = nothing,
	{% else %}
	{{ relation.name }}::Union{Nothing, {{ relation.julia_type }}Struct } = nothing,
	{% endif %}
{% endfor %}
{% for member in datatype['VectorMembers'] %}
	{% if member.is_builtin %}
	{{ member.name }}::Vector{ {{ member.name }}T } = Vector{ {{ member.julia_type }} }([]),
	{% else %}
	{% if upstream_edm and (member.full_type in upstream_edm.components or member.full_type in upstream_edm.datatypes) %}
	{{ member.name }}::Vector{ {{ upstream_edm_name }}.{{ member.julia_type }}Struct } = Vector{ {{ upstream_edm_name }}.{{ member.julia_type }}Struct }([]),
	{% else %}
	{{ member.name }}::Vector{ {{ member.julia_type }}Struct } = Vector{ {{ member.julia_type }}Struct }([]),
	{% endif %}
	{% endif %}
{% endfor %}
{% set structure_start = '{' %}
{% set structure_end = '}' %}
) {% if datatype['VectorMembers']|selectattr('is_builtin')|list -%}
    where {{ structure_start -}}
{% for member in datatype['VectorMembers'] %}
{% if member.is_builtin %}
{{ member.name }}T<:{{ julia_helpers.classify_data_type(member.julia_type) }}{% if not loop.last %},{% endif %}
{% endif %}
{% endfor -%}
{{ structure_end }}
{% endif %}

	return {{ datatype['class'].bare_type }}Struct{{ julia_helpers.julia_parameters(datatype['params_jl'], "Struct", upstream_edm, upstream_edm_name) }}(
	{% for member in datatype['Members'] %}
	{% if member.is_builtin %}
	{{ member.julia_type }}({{ member.name }}),
	{% else %}
	{{ member.name }},
	{% endif %}
	{% endfor %}
	{% for relation in datatype['OneToManyRelations'] %}
	{{ relation.name }},
	{% endfor %}
	{% for relation in datatype['OneToOneRelations'] %}
	{{ relation.name }},
	{% endfor %}
	{% for member in datatype['VectorMembers'] %}
	{% if member.is_builtin %}
	convert(Vector{ {{ member.julia_type }} }, {{ member.name }}),
	{% else %}
	{{ member.name }},
	{% endif %}
	{% endfor %}
	)
end

{{ datatype['class'].bare_type }}Collection = Vector{ {{ datatype['class'].bare_type }}Struct{{ julia_helpers.julia_parameters(datatype['params_jl'], "Struct", upstream_edm, upstream_edm_name) }} }

{% endfor %}
end
