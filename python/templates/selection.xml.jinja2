{%- macro class_selection(class, prefix='', postfix='', vector=False) %}
{% set full_name = prefix + class.bare_type + postfix %}
{% set namespace = class.namespace + '::' if class.namespace else '' %}
        <class name="{{ namespace }}{{ full_name }}" ClassVersion="{{ version }}"/>
{% if vector %}
        <class name="std::vector<{{ namespace }}{{ full_name }}>" ClassVersion="{{ version }}"/>
{%- endif -%}
{%- endmacro -%}

{%- macro data_selection(class, version) %}
{% set namespace = class.namespace + '::' if class.namespace else '' %}
        <class name="{{ namespace }}v{{ version }}::{{ class.bare_type }}Data"/>
        <class name="std::vector<{{ namespace }}v{{ version }}::{{ class.bare_type }}Data>"/>
{%- endmacro -%}

{% macro ioread(iorule) %}
        <ioread sourceClass="{{ iorule.sourceClass }}" targetClass="{{ iorule.targetClass}}" version="[{{ iorule.version }}]" target="{{ iorule.target }}" source="{{ iorule.source }}">
        <![CDATA[
	     {{ iorule.code }}
        ]]>
        </ioread>
{% endmacro %}

<lcgdict>
    <selection>

        <!-- components -->
{% for class in components %}
{{ class_selection(class, vector=True) }}
{% endfor %}

        <!-- datatypes -->
{% for class in datatypes %}
{{ data_selection(class, version) }}
{{ class_selection(class, postfix='Data', vector=True) }}
{# We need to also create the collections in the selection xml file. #}
{# Otherwise the python interface does not work in gcc builds #}
{# Additionally, in order to allow "direct" access to the user facing classes #}
{# we have to declare them here, otherwise they cannot be easily imported #}
{{ class_selection(class, prefix='Mutable') }}
{{ class_selection(class) }}
{{ class_selection(class, postfix='Collection') }}
{% endfor %}


        <!-- previous schema components and pods -->
{% for class in old_schema_components %}
{{ class_selection(class) }}
{% endfor %}
{% for class in old_schema_datatypes %}
{{ class_selection(class, postfix="Data") }}
{% endfor %}

    </selection>

{% for iorule in iorules %}
{{ ioread(iorule) }}
{% endfor %}
</lcgdict>
