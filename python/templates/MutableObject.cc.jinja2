#include "podio/utilities/MaybeSharedPtr.h"
{% import "macros/utils.jinja2" as utils %}
{% import "macros/implementations.jinja2" as macros %}
// AUTOMATICALLY GENERATED FILE - DO NOT EDIT

{{ utils.datamodel_includes(incfolder, class.bare_type) }}

{% for include in includes_cc %}
{{ include }}
{% endfor %}

#if defined(PODIO_JSON_OUTPUT) && !defined(__CLING__)
#include "nlohmann/json.hpp"
#endif

#include <ostream>

{{ utils.namespace_open(class.namespace) }}

{{ macros.common_constructors_destructors(class.bare_type, Members, prefix='Mutable') }}

{% with full_type = 'Mutable' + class.bare_type %}
{{ full_type }}::{{ full_type }}() :
  m_obj(new {{ class.bare_type }}Obj{}, podio::utils::MarkOwned) {}

{% if Members %}
{{ full_type }}::{{ full_type }}({{ Members | map(attribute='signature') | join(', ') }}) :
  m_obj(new {{ class.bare_type }}Obj{}, podio::utils::MarkOwned) {
{% for member in Members %}
  m_obj->data.{{ member.name }} = {{ member.name }};
{% endfor %}
}
{% endif %}

{{ full_type }}::{{ full_type }}(podio::utils::MaybeSharedPtr<{{ class.bare_type }}Obj> obj) : m_obj(obj) {}

{{ full_type }}::operator {{ class.bare_type }}() const { return {{ class.bare_type }}(m_obj.get()); }

{% endwith %}

{{ macros.member_getters(class, Members, use_get_syntax, prefix='Mutable') }}
{{ macros.single_relation_getters(class, OneToOneRelations, use_get_syntax, prefix='Mutable') }}
{{ macros.member_setters(class, Members, use_get_syntax, prefix='Mutable') }}
{{ macros.single_relation_setters(class, OneToOneRelations, use_get_syntax, prefix='Mutable') }}
{{ macros.multi_relation_handling(class, OneToManyRelations + VectorMembers, use_get_syntax, with_adder=True, prefix='Mutable') }}

{{ utils.if_present_with_replacement(ExtraCode, "implementation", '{name}', 'Mutable' + class.bare_type) }}
{{ utils.if_present_with_replacement(MutableExtraCode, "implementation", '{name}', 'Mutable' + class.bare_type) }}

{{ macros.common_object_funcs(class, prefix='Mutable') }}

{{ macros.json_output(class, Members,
                      OneToOneRelations, OneToManyRelations,
                      VectorMembers, use_get_syntax, prefix='Mutable')}}

{{ utils.namespace_close(class.namespace) }}
