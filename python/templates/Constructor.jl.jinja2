{% import "macros/params.jinja2" as params %}
include("{{ class.bare_type }}Struct.jl")
{% for include in includes_jl['constructor'] %}
{{ include }}
{% endfor %}

module {{ class.bare_type }}Module
export {{ class.bare_type }}

function {{ class.bare_type }}(
    {% for member in Members %}
	{% if member.is_array %}
	{{ member.name }}::Main.{{ member.julia_type }} = Main.{{ member.julia_type }}(undef),
	{% elif member.is_builtin %}
	{{ member.name }}::{{ member.julia_type }} = {{ member.julia_type }}(0),
	{% else %}
	{{ member.name }}::Main.{{ member.julia_type }}Struct = Main.{{ member.julia_type }}(),
	{% endif %}
{% endfor %}
{% for relation in OneToManyRelations %}
	{{ relation.name }}::Vector{ Main.{{ relation.julia_type }}Struct } = Vector{ Main.{{ relation.julia_type }}Struct }(),
{% endfor %}
{% for relation in OneToOneRelations %}
	{{ relation.name }}::Union{Nothing, Main.{{ relation.julia_type }}Struct } = nothing,
{% endfor %}
{% for member in VectorMembers %}
	{% if member.is_builtin %}
	{{ member.name }}::Vector{ {{ member.julia_type }} } = Vector{ {{ member.julia_type }} }([]),
	{% else %}
	{{ member.name }}::Vector{ Main.{{ member.julia_type }}Struct } = Vector{ Main.{{ member.julia_type }}Struct }([]),
	{% endif %}
{% endfor %}
)
	return Main.{{ class.bare_type }}Struct{{ params.julia_parameters(params_jl, "Main.", "Struct") }}(
	{% for member in Members %}
	{{ member.name }},
	{% endfor %}
	{% for relation in OneToManyRelations %}
	{{ relation.name }},
	{% endfor %}
	{% for relation in OneToOneRelations %}
	{{ relation.name }},
	{% endfor %}
	{% for member in VectorMembers %}
	{{ member.name }},
	{% endfor %}
	)
end
end