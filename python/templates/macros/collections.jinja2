{% macro vectorized_access(class, member) %}
std::vector<{{ member.full_type }}> {{ class.bare_type }}Collection::{{ member.name }}(const size_t nElem) const {
  std::vector<{{ member.full_type }}> tmp;
  const auto valid_size = nElem != 0 ? std::min(nElem, m_storage.entries.size()) : m_storage.entries.size();
  tmp.reserve(valid_size);
  for (size_t i = 0; i < valid_size; ++i) {
    tmp.emplace_back(m_storage.entries[i]->data.{{ member.name }});
  }
  return tmp;
}
{% endmacro %}


{% macro clear_relation(relation) %}
  if (m_rel_{{ relation.name }}) {
    for (auto& item : (*m_rel_{{ relation.name }})) { item.unlink(); }
    m_rel_{{ relation.name }}->clear();
  }
{% endmacro %}

{% macro _relation_index_handling(relation) %}
    (*m_data)[i].{{ relation.name }}_begin = {{ relation.name }}_index;
    (*m_data)[i].{{ relation.name }}_end += {{ relation.name }}_index;
    {{ relation.name }}_index = (*m_data)[i].{{ relation.name }}_end;
{%- endmacro %}


{% macro prepare_for_write_multi_relation(relation, index) %}
{{ _relation_index_handling(relation) }}
    for (const auto& it : (*m_rel_{{ relation.name }}_tmp[i])) {
      if (it.getObjectID().index == podio::ObjectID::untracked) {
        throw std::runtime_error("Trying to persistify untracked object");
      }
      m_refCollections[{{ index }}]->emplace_back(it.getObjectID());
    }
{% endmacro %}


{% macro prepare_for_write_vector_member(member) %}
{{ _relation_index_handling(member) }}
    for (const auto& it : (*m_vecs_{{ member.name }}[i])) { m_vec_{{ member.name }}->push_back(it); }
{% endmacro %}


{% macro prepare_for_write_single_relation(relation, index, start_index) %}
{% set real_index = start_index + index %}
  for (auto& obj : entries) {
    if (obj->m_{{ relation.name }}) {
      m_refCollections[{{ real_index }}]->emplace_back(obj->m_{{ relation.name }}->getObjectID());
    } else {
       m_refCollections[{{ real_index }}]->push_back({podio::ObjectID::invalid, 0});
    }
  }
{% endmacro %}

{% macro get_obj_ptr(type) %}
      podio::CollectionBase* coll = nullptr;
      {{ type }}Obj* obj = nullptr;
      if (collectionProvider->get(id.collectionID, coll)) {
        auto* tmp_coll = static_cast<{{ type }}Collection*>(coll);
        obj = tmp_coll->m_storage.entries[id.index];
      }
{%- endmacro %}

{% macro set_references_multi_relation(relation, index) %}
  for (unsigned int i = 0, size = m_refCollections[{{ index }}]->size(); i != size; ++i) {
    const auto id = (*m_refCollections[{{ index }}])[i];
    if (id.index != podio::ObjectID::invalid) {
      podio::CollectionBase* coll = nullptr;
      if (!collectionProvider->get(id.collectionID, coll)) {
        m_rel_{{ relation.name }}->emplace_back({{ relation.full_type }}::makeEmpty());
        continue;
      }
{% if relation.interface_types %}
      // We need the concrete collection type to assign it to an InferenceWrapper
{% set else = joiner("else") %}
{% for int_type in relation.interface_types %}
      {{ else() }} if (auto {{ int_type.bare_type }}Coll = dynamic_cast<{{ int_type.full_type }}Collection*>(coll)) {
        const auto tmp = (*{{ int_type.bare_type }}Coll)[id.index];
        m_rel_{{ relation.name }}->emplace_back(tmp);
      }
{% endfor %}
{% else %}
      {{ relation.full_type }}Collection* tmp_coll = static_cast<{{ relation.full_type }}Collection*>(coll);
      const auto tmp = (*tmp_coll)[id.index];
      m_rel_{{ relation.name }}->emplace_back(tmp);
{% endif %}
    } else {
      m_rel_{{ relation.name }}->emplace_back({{ relation.full_type }}::makeEmpty());
    }
  }
{% endmacro %}


{% macro set_reference_single_relation(relation, index, start_index) %}
{% set real_index = index + start_index %}
  for (unsigned int i = 0, size = entries.size(); i != size; ++i) {
    const auto id = (*m_refCollections[{{ real_index }}])[i];
    if (id.index != podio::ObjectID::invalid) {
      podio::CollectionBase* coll = nullptr;
      if (!collectionProvider->get(id.collectionID, coll)) {
        entries[i]->m_{{ relation.name }} = nullptr;
        continue;
      }
{% if relation.interface_types %}
{% set else = joiner("else") %}
{% for int_type in relation.interface_types %}
      {{ else() }} if (auto {{ int_type.bare_type }}Coll = dynamic_cast<{{ int_type.full_type }}Collection*>(coll)) {
        entries[i]->m_{{ relation.name }} = new {{ relation.full_type }}((*{{ int_type.bare_type }}Coll)[id.index]);
      }
{% endfor %}
{% else %}
      {{ relation.full_type }}Collection* tmp_coll = static_cast<{{ relation.full_type }}Collection*>(coll);
      entries[i]->m_{{ relation.name }} = new {{ relation.full_type }}((*tmp_coll)[id.index]);
{% endif %}
    } else {
      entries[i]->m_{{ relation.name }} = nullptr;
    }
  }
{% endmacro %}


{% macro ostream_operator(class, members, single_relations, multi_relations, vector_members, get_syntax, settings) %}
std::ostream& operator<<(std::ostream& o, const {{ class.bare_type }}Collection& v) {
{% set col_width = 12 %}
  const auto old_flags = o.flags();
  o << "{{ 'id' | ostream_collection_header(col_width=col_width) }}:
{%- for header in settings.header_contents -%}
  {{ header | ostream_collection_header(col_width=col_width) }}:
{%- endfor -%}" << '\n';

  for (const auto&& el : v) {
    o << std::scientific << std::showpos << std::setw({{ col_width }}) << el.id() << " "
{% for member in members %}
{% if not member.is_array %}
      << std::setw({{ col_width }}) << el.{{ member.getter_name(get_syntax) }}() << " "
{% endif %}
{% endfor %}
      << std::endl;

{% for relation in multi_relations %}
    o << "      {{ relation.name }} : ";
    for (unsigned j = 0, N = el.{{ relation.name }}_size(); j < N; ++j) {
      o << el.{{ relation.getter_name(get_syntax) }}(j).id() << " ";
    }
    o << std::endl;
{% endfor %}

{% for relation in single_relations %}
    o << "      {{ relation.name }} : ";
    o << el.{{ relation.getter_name(get_syntax) }}().id() << std::endl;
{% endfor %}

{% for member in vector_members %}
    o << "      {{ member.name }} : ";
    for (unsigned j = 0, N = el.{{ member.name }}_size(); j < N; ++j) {
      o << el.{{ member.getter_name(get_syntax) }}(j) << " ";
    }
    o << std::endl;
{% endfor %}

  }

  o.flags(old_flags);
  return o;
}

void {{ class.bare_type }}Collection::print(std::ostream& os, bool flush) const {
  os << *this;
  if (flush) {
    os.flush();
  }
}
{% endmacro %}

{% macro create_buffers(class, package_name, collection_type, OneToManyRelations, OneToOneRelations, VectorMembers, schemaVersion) %}

{% if schemaVersion == -1 %}
podio::CollectionReadBuffers createBuffers(bool isSubset) {
{% else %}
podio::CollectionReadBuffers createBuffersV{{ schemaVersion }}(bool isSubset) {
{% endif %}
  auto readBuffers = podio::CollectionReadBuffers{};
  readBuffers.type = "{{ class.full_type }}Collection";
{% if schemaVersion == -1 %}
  readBuffers.schemaVersion = {{ package_name }}::meta::schemaVersion;
  readBuffers.data = isSubset ? nullptr : new {{ class.bare_type }}DataContainer;
{% else %}
  readBuffers.schemaVersion = {{ schemaVersion }};
  readBuffers.data = isSubset ? nullptr : new std::vector<{{ class.bare_type }}v{{ schemaVersion }}Data>;
{% endif %}
  // The number of ObjectID vectors is either 1 or the sum of OneToMany and
  // OneToOne relations
  const auto nRefs = isSubset ? 1 : {{ OneToManyRelations | length }} + {{ OneToOneRelations | length }};
  readBuffers.references = new podio::CollRefCollection(nRefs);
  for (auto& ref : *readBuffers.references) {
    // Make sure to place usable buffer pointers here
    ref = std::make_unique<std::vector<podio::ObjectID>>();
  }

  readBuffers.vectorMembers = new podio::VectorMembersInfo();
  if (!isSubset) {
    readBuffers.vectorMembers->reserve({{ VectorMembers | length }});
{% for member in VectorMembers %}
    readBuffers.vectorMembers->emplace_back("{{ member.full_type }}", new std::vector<{{ member.full_type }}>);
{% endfor %}
  }

  readBuffers.createCollection = [](podio::CollectionReadBuffers buffers, bool isSubsetColl) {
    {{ collection_type }}Data data(buffers, isSubsetColl);
    return std::make_unique<{{ collection_type }}>(std::move(data), isSubsetColl);
  };

  readBuffers.recast = [](podio::CollectionReadBuffers& buffers) {
    // We only have any of these buffers if this is not a subset collection
    if (buffers.data) {
      buffers.data = podio::CollectionWriteBuffers::asVector<{{ class.full_type }}Data>(buffers.data);
{% if VectorMembers %}
{% for member in VectorMembers %}
      (*buffers.vectorMembers)[{{ loop.index0 }}].second = podio::CollectionWriteBuffers::asVector<{{ member.full_type }}>((*buffers.vectorMembers)[{{ loop.index0 }}].second);
{% endfor %}
{% endif %}
    }
  };

  readBuffers.deleteBuffers = [](podio::CollectionReadBuffers& buffers) {
    if (buffers.data) {
      // If we have data then we are not a subset collection and we have to
      // clean up all type erased buffers by casting them back to something that
      // we can delete
      delete static_cast<{{ class.full_type }}DataContainer*>(buffers.data);
{% for member in VectorMembers %}
      delete static_cast<std::vector<{{ member.full_type }}>*>((*buffers.vectorMembers)[{{ loop.index0 }}].second);
{% endfor %}

    }
    delete buffers.references;
    delete buffers.vectorMembers;
  };

  return readBuffers;
}

{% endmacro %}
