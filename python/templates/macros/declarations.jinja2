{% macro class_description(type, description, author, prefix='', postfix='') %}
/** @class {{ prefix }}{{ type }}{{ postfix }}
 *  {{ description }}
 *  @author: {{ author }}
 */
{%- endmacro %}


{% macro member_getters(members, get_syntax) %}
{%for member in members %}
  /// Access the {{ member.docstring }}
  {{ member.getter_return_type() }} {{ member.getter_name(get_syntax) }}() const;
{% if member.is_array %}
  /// Access item i of the {{ member.docstring }}
  {{ member.getter_return_type(True) }} {{ member.getter_name(get_syntax) }}(size_t i) const;
{%- endif %}
{% if member.sub_members %}
{% for sub_member in member.sub_members %}
  /// Access the member of {{ member.docstring }}
  {{ sub_member.getter_return_type() }} {{ sub_member.getter_name(get_sytnax) }}() const;
{% endfor %}
{% endif %}

{% endfor %}
{% endmacro %}


{% macro member_setters(members, get_syntax) %}
{% for member in members %}
  /// Set the {{ member.docstring }}
  void {{ member.setter_name(get_syntax) }}({{ member.full_type }} value);
{% if member.is_array %}
  void {{ member.setter_name(get_syntax) }}(size_t i, {{ member.array_type }} value);
{% endif %}
  /// Get mutable reference to {{ member.docstring }}
  {{ member.full_type }}& {{ member.getter_name(get_syntax) }}();
{% if get_syntax %}
  /// Get reference to {{ member.docstring }}
  [[deprecated("use {{ member.getter_name(get_syntax) }} instead")]]
  {{ member.full_type }}& {{ member.name }}();
{% endif %}
{% if member.sub_members %}
{% for sub_member in member.sub_members %}
{% if sub_member.is_builtin %}
  /// Set the member of {{ member.docstring }}
  void {{ sub_member.setter_name(get_syntax) }}({{ sub_member.full_type }} value);
{% else %}
  /// Get reference to the member of {{ member.docstring }}
  {{ sub_member.full_type }}& {{ sub_member.name }}();
  /// Set the member of  {{ member.docstring }}
  void {{ sub_member.setter_name(get_sytnax) }}({{ sub_member.full_type }} value);
{% endif %}
{% endfor %}
{% endif %}

{% endfor %}
{% endmacro %}


{% macro constructors_destructors(type, members, prefix='') %}
{% set full_type = prefix + type %}
  /// default constructor
  {{ full_type }}();

{%if members %}
  /// Constructor initializing all members
  {{ full_type }}({{ members | map(attribute='signature') | join(', ')  }});
{% endif %}

  /// copy constructor
  {{  full_type }}(const {{  full_type }}& other) = default;

  /// copy-assignment operator
  {{  full_type }}& operator=({{ full_type }} other);

  /// create a mutable deep-copy of the object with identical relations
  Mutable{{ type }} clone() const;

  /// destructor
  ~{{  full_type }}() = default;
{% endmacro %}


{% macro common_object_funcs(type, prefix='') %}
{% set full_type = prefix + type %}
  /// check whether the object is actually available
  bool isAvailable() const;
  /// disconnect from {{ type }}Obj instance
  void unlink() { m_obj = podio::utils::MaybeSharedPtr<{{ type }}Obj>{nullptr}; }

{% set inverse_type = type if prefix else 'Mutable' + type %}
  bool operator==(const {{ full_type }}& other) const { return m_obj == other.m_obj; }
  bool operator==(const {{ inverse_type }}& other) const;

  bool operator!=(const {{ full_type }}& other) const { return !(*this == other); }
  bool operator!=(const {{ inverse_type }}& other) const { return !(*this == other); }

  // less comparison operator, so that objects can be e.g. stored in sets.
  bool operator<(const {{ full_type }}& other) const { return m_obj < other.m_obj; }

  podio::ObjectID id() const { return getObjectID(); }

  const podio::ObjectID getObjectID() const;

  friend void swap({{ full_type }}& a, {{ full_type }}& b) {
    using std::swap;
    swap(a.m_obj, b.m_obj); // swap out the internal pointers
  }
{%- endmacro %}


{% macro single_relation_getters(relations, get_syntax) %}
{% for relation in relations %}
  /// Access the {{ relation.description }}
  const {{ relation.full_type }} {{ relation.getter_name(get_syntax) }}() const;
{% endfor %}
{%- endmacro %}


{% macro single_relation_setters(relations, get_syntax) %}
{% for relation in relations %}
  /// Set the {{ relation.description }}
  void {{ relation.setter_name(get_syntax) }}({{ relation.full_type }} value);
{% endfor %}
{%- endmacro %}


{% macro multi_relation_handling(relations, get_syntax, with_adder=False) %}
{% for relation in relations %}
{% if with_adder %}
  void {{ relation.setter_name(get_syntax, is_relation=True) }}({{ relation.full_type }});
{% endif %}
  std::size_t {{ relation.name }}_size() const;
  {{ relation.full_type }} {{ relation.getter_name(get_syntax) }}(std::size_t) const;
  std::vector<{{ relation.full_type }}>::const_iterator {{ relation.name }}_begin() const;
  std::vector<{{ relation.full_type }}>::const_iterator {{ relation.name }}_end() const;
  podio::RelationRange<{{ relation.full_type }}> {{ relation.getter_name(get_syntax) }}() const;
{% endfor %}
{%- endmacro %}

{% macro json_output(type, prefix='') %}
#if defined(PODIO_JSON_OUTPUT) && !defined(__CLING__)
void to_json(nlohmann::json& j, const {{ prefix }}{{ type }}& value);
#endif
{% endmacro %}
