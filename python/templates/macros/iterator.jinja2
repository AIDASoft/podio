{% macro iterator_declaration(class, prefix='') %}
{% with iterator_type = class.bare_type + prefix + 'CollectionIterator' %}
{% set ptr_init = 'nullptr' if prefix else 'podio::MaybeSharedPtr<' + class.bare_type + 'Obj>{nullptr}' %}
class {{ iterator_type }} {
public:
  {{ iterator_type }}(size_t index, const {{ class.bare_type }}ObjPointerContainer* collection) : m_index(index), m_object({{ ptr_init }}), m_collection(collection) {}

  {{ iterator_type }}(const {{ iterator_type }}&) = delete;
  {{ iterator_type }}& operator=(const {{ iterator_type }}&) = delete;

  bool operator!=(const {{ iterator_type}}& x) const {
    return m_index != x.m_index; // TODO: may not be complete
  }

  {{ prefix }}{{ class.bare_type }} operator*();
  {{ prefix }}{{ class.bare_type }}* operator->();
  {{ iterator_type }}& operator++();

private:
  size_t m_index;
  {{ prefix }}{{ class.bare_type }} m_object;
  const {{ class.bare_type }}ObjPointerContainer* m_collection;
};
{% endwith %}
{% endmacro %}


{% macro iterator_definitions(class, prefix='') %}
{% set ptr_type = '' if prefix else 'podio::MaybeSharedPtr<' + class.bare_type + 'Obj>' %}
{% with iterator_type = class.bare_type + prefix + 'CollectionIterator' %}
{{ prefix }}{{ class.bare_type }} {{ iterator_type }}::operator*() {
  m_object.m_obj = {{ ptr_type }}((*m_collection)[m_index]);
  return m_object;
}

{{ prefix }}{{ class.bare_type }}* {{ iterator_type }}::operator->() {
  m_object.m_obj = {{ ptr_type }}((*m_collection)[m_index]);
  return &m_object;
}

{{ iterator_type }}& {{ iterator_type }}::operator++() {
  ++m_index;
  return *this;
}

{% endwith %}
{% endmacro %}
