{% macro iterator_declaration(class, prefix='') %}
{% with iterator_type = class.bare_type + prefix + 'CollectionIterator' %}
{% set ptr_init = 'podio::utils::MaybeSharedPtr<' + class.bare_type +'Obj>{nullptr}' %}
class {{ iterator_type }} {
public:
  using value_type = {{ class.bare_type }};
  using difference_type = ptrdiff_t;
  using reference = {{ prefix }}{{ class.bare_type }};
  using pointer = {{ prefix }}{{ class.bare_type }}*;
  using iterator_category = std::input_iterator_tag;
  // `std::forward_iterator` is supported except that the pointers obtained with `operator->()`
  // remain valid as long as the iterator is valid, not as long as the range is valid.
  using iterator_concept = std::random_access_iterator_tag;

  {{ iterator_type }}(size_t index, const {{ class.bare_type }}ObjPointerContainer* collection) : m_index(index), m_object({{ ptr_init }}), m_collection(collection) {}
  {{ iterator_type }}() = default;

  {{ iterator_type }}(const {{ iterator_type }}&) = default;
  {{ iterator_type }}({{ iterator_type }}&&) = default;
  {{ iterator_type }}& operator=(const {{ iterator_type }}&) = default;
  {{ iterator_type }}& operator=({{iterator_type}}&&) = default;
  ~{{ iterator_type }}() = default;

  auto operator<=>(const {{ iterator_type}}& other) const {
    return m_index <=> other.m_index;
  }

  bool operator==(const {{ iterator_type }}& x) const {
    return m_index ==  x.m_index;
  }

  reference operator*() const;
  pointer operator->();
  {{ iterator_type }}& operator++();
  {{ iterator_type }} operator++(int);
  {{ iterator_type }}& operator--();
  {{ iterator_type }} operator--(int);
  {{ iterator_type }}& operator+=(difference_type n);
  {{ iterator_type }} operator+(difference_type n) const;
  friend {{ iterator_type }} operator+(difference_type n, const {{ iterator_type }}& it);
  {{ iterator_type }}& operator-=(difference_type n);
  {{ iterator_type }} operator-(difference_type n) const;
  reference operator[](difference_type n) const;
  difference_type operator-(const {{ iterator_type }}& other) const;

private:
  size_t m_index{0};
  {{ prefix }}{{ class.bare_type }} m_object { {{ ptr_init }} };
  const {{ class.bare_type }}ObjPointerContainer* m_collection{nullptr};
};
{% endwith %}
{% endmacro %}


{% macro iterator_definitions(class, prefix='') %}
{% with iterator_type = class.bare_type + prefix + 'CollectionIterator' %}
{% set ptr_type = 'podio::utils::MaybeSharedPtr<' + class.bare_type +'Obj>' %}
{{ iterator_type }}::reference {{ iterator_type }}::operator*() const {
  return reference{ {{ ptr_type }}((*m_collection)[m_index]) };
}

{{ iterator_type }}::pointer {{ iterator_type }}::operator->() {
  m_object.m_obj = {{ ptr_type }}((*m_collection)[m_index]);
  return &m_object;
}

{{ iterator_type }}& {{ iterator_type }}::operator++() {
  ++m_index;
  return *this;
}

{{ iterator_type }} {{ iterator_type }}::operator++(int) {
  auto copy = *this;
  ++m_index;
  return copy;
}

{{ iterator_type }}& {{ iterator_type }}::operator--() {
  --m_index;
  return *this;
}

{{ iterator_type }} {{ iterator_type }}::operator--(int) {
  auto copy = *this;
  --m_index;
  return copy;
}

{{ iterator_type }}& {{ iterator_type }}::operator+=(difference_type n) {
  m_index += n;
  return *this;
}

{{ iterator_type }} {{ iterator_type }}::operator+(difference_type n) const {
  auto copy = *this;
  copy += n;
  return copy;
}

{{ iterator_type }} operator+({{ iterator_type }}::difference_type n, const {{ iterator_type }}& it) {
    return it + n;
}

{{ iterator_type }}& {{ iterator_type }}::operator-=(difference_type n) {
  m_index -= n;
  return *this;
}

{{ iterator_type }} {{ iterator_type }}::operator-(difference_type n) const {
  auto copy = *this;
  copy -= n;
  return copy;
}

{{ iterator_type }}::reference {{ iterator_type }}::operator[](difference_type n) const {
  return reference{ {{ ptr_type }}((*m_collection)[m_index + n]) };
}

{{ iterator_type }}::difference_type {{ iterator_type }}::operator-(const {{ iterator_type }}& other) const {
    return m_index - other.m_index;
}

{% endwith %}
{% endmacro %}
