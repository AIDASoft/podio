# Helper function for adding two targets. A shared library and a corresponding
# ROOT dictionary that is necessary for e.g. python bindings.
# Arguments:
#   libname         The base name for the library (and target)
#   headers         The header files that should be passed to dictionary generation
#   sources         The source files for the shared libraries
#   linkdef         The linkdef file passed to the dictionary generation
#
# The function creates the following targets
#   <libname>       The shared library. Also available under the podio::<libname> alias
#                   This is not linked against anything and has include directories set
#                   to podio only. So some target_link_libraries are most likely to be
#                   done outside
#   <libname>Dict   The dictionary shared library. This is linked against podio::podio
#                   and the necessary ROOT libraries
#
# Additionally the following files are generated by root
#   - <libname>DictDict.rootmap
#   - <libname>Dict_rdict.pcm
# these files have to be installed to the same directory as the dictionary shared
# library
FUNCTION(PODIO_ADD_LIB_AND_DICT libname headers sources linkdef )
  # shared library
  add_library(${libname} SHARED ${sources})
  add_library(podio::${libname} ALIAS ${libname})
  target_include_directories(${libname} PUBLIC
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)

  # dictionary
  set(dictname ${libname}Dict)
   
  ROOT_GENERATE_DICTIONARY(${dictname} ${headers} LINKDEF ${linkdef}
    MODULE ${libname}
  )

ENDFUNCTION()


# --- Core podio library and dictionary without I/O
SET(core_sources
  CollectionIDTable.cc
  GenericParameters.cc
  ASCIIWriter.cc
  EventStore.cc
  DatamodelRegistry.cc
  DatamodelRegistryIOHelpers.cc
  UserDataCollection.cc
  CollectionBufferFactory.cc
  MurmurHash3.cpp
  SchemaEvolution.cc
  )

SET(core_headers
  ${PROJECT_SOURCE_DIR}/include/podio/CollectionBase.h
  ${PROJECT_SOURCE_DIR}/include/podio/CollectionIDTable.h
  ${PROJECT_SOURCE_DIR}/include/podio/EventStore.h
  ${PROJECT_SOURCE_DIR}/include/podio/ICollectionProvider.h
  ${PROJECT_SOURCE_DIR}/include/podio/IReader.h
  ${PROJECT_SOURCE_DIR}/include/podio/ObjectID.h
  ${PROJECT_SOURCE_DIR}/include/podio/UserDataCollection.h
  ${PROJECT_SOURCE_DIR}/include/podio/podioVersion.h
  ${PROJECT_SOURCE_DIR}/include/podio/DatamodelRegistry.h
  ${PROJECT_SOURCE_DIR}/include/podio/utilities/DatamodelRegistryIOHelpers.h
  )

PODIO_ADD_LIB_AND_DICT(podio "${core_headers}" "${core_sources}" DictLinkDef.h)
target_compile_options(podio PRIVATE -pthread)


# --- Root I/O functionality and corresponding dictionary
SET(root_sources
  rootUtils.h
  ROOTWriter.cc
  ROOTReader.cc
  ROOTFrameWriter.cc
  ROOTFrameReader.cc
  ROOTLegacyReader.cc
)
if(ENABLE_RNTUPLE)
  list(APPEND root_sources
      ROOTNTupleReader.cc
      ROOTNTupleWriter.cc
     )
endif()

SET(root_headers
  ${PROJECT_SOURCE_DIR}/include/podio/ROOTFrameReader.h
  ${PROJECT_SOURCE_DIR}/include/podio/ROOTLegacyReader.h
  ${PROJECT_SOURCE_DIR}/include/podio/ROOTFrameWriter.h
  )
if(ENABLE_RNTUPLE)
  list(APPEND root_headers
      ${PROJECT_SOURCE_DIR}/include/podio/ROOTNTupleReader.h
      ${PROJECT_SOURCE_DIR}/include/podio/ROOTNTupleWriter.h
     )
endif()

PODIO_ADD_LIB_AND_DICT(podioRootIO "${root_headers}" "${root_sources}" root_selection.xml)
target_link_libraries(podioRootIO PUBLIC podio::podio ROOT::Core ROOT::RIO ROOT::Tree)
if(ENABLE_RNTUPLE)
  target_link_libraries(podioRootIO PUBLIC ROOT::ROOTNTuple)
endif()

# --- SIO I/O functionality and corresponding dictionary
if(ENABLE_SIO)
  SET(sio_sources
    SIOReader.cc
    SIOWriter.cc
    SIOBlockUserData.cc
    SIOBlock.cc
    SIOFrameWriter.cc
    SIOFrameReader.cc
    SIOFrameData.cc
    sioUtils.h
    SIOLegacyReader.cc
    )

  SET(sio_headers
    ${PROJECT_SOURCE_DIR}/include/podio/SIOFrameReader.h
    ${PROJECT_SOURCE_DIR}/include/podio/SIOLegacyReader.h
    ${PROJECT_SOURCE_DIR}/include/podio/SIOFrameWriter.h
    )

  PODIO_ADD_LIB_AND_DICT(podioSioIO "${sio_headers}" "${sio_sources}" sio_selection.xml)
  target_link_libraries(podioSioIO PUBLIC podio::podio SIO::sio ${CMAKE_DL_LIBS} ${PODIO_FS_LIBS})
  target_compile_definitions(podioSioIO PUBLIC PODIO_ENABLE_SIO=1)

  LIST(APPEND INSTALL_LIBRARIES podioSioIO podioSioIODict)
endif()

# --- Install everything
install(TARGETS podio podioDict  podioRootIO podioRootIODict ${INSTALL_LIBRARIES}
  EXPORT podioTargets
  DESTINATION "${CMAKE_INSTALL_LIBDIR}")

# Only install the necessary headers
if (ENABLE_SIO)
  install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/podio DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}")
else()
  install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/podio DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
    REGEX SIO.*\\.h$ EXCLUDE )
endif()

install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/podioDictDict.rootmap
  ${CMAKE_CURRENT_BINARY_DIR}/libpodioDict_rdict.pcm
  ${CMAKE_CURRENT_BINARY_DIR}/podioRootIODictDict.rootmap
  ${CMAKE_CURRENT_BINARY_DIR}/libpodioRootIODict_rdict.pcm
  DESTINATION "${CMAKE_INSTALL_LIBDIR}")

if (ENABLE_SIO)
  install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/podioSioIODictDict.rootmap
    ${CMAKE_CURRENT_BINARY_DIR}/libpodioSioIODict_rdict.pcm
    DESTINATION "${CMAKE_INSTALL_LIBDIR}"
    )
endif()

add_executable(podio_test_hashes test_hashes.cpp)
target_link_libraries(podio_test_hashes PRIVATE podio::podio)
install(TARGETS podio_test_hashes
  EXPORT podioTargets
  DESTINATION "${CMAKE_INSTALL_BINDIR}"
)
