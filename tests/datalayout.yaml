---
schema_version : 2

options :
  # should getters / setters be prefixed with get / set?
  getSyntax: False
  # should POD members be exposed with getters/setters in classes that have them as members?
  exposePODMembers: True
  includeSubfolder: True

components :
  ToBeDroppedStruct:
    Description: "A struct to be dropped during schema evolution"
    Members:
      - int x

  SimpleStruct:
    Members:
      - int x [mm]
      - int y [mm]
      - int z [mm]
      - std::array<int, 4> p [mm]
    # can also add c'tors:
    ExtraCode :
      declaration: "
      SimpleStruct() : x(0),y(0),z(0) {}\n
      SimpleStruct( const int* v) : x(v[0]),y(v[1]),z(v[2]) {}
      "

  NotSoSimpleStruct:
    Description : "A not so simple struct"
    Author : "Someone"
    Members:
      - SimpleStruct data [GeV] // component members can have descriptions and units

  ex2::NamespaceStruct:
    Members:
      - int x
      - int y

  ex2::NamespaceInNamespaceStruct:
    Members:
      - ex2::NamespaceStruct data

  nsp::AnotherNamespaceStruct:
    Members:
      - int x
      - int y

  StructWithFixedWithTypes:
    Members:
      - uint16_t fixedUnsigned16 // unsigned int with exactly 16 bits
      - std::int64_t fixedInteger64 // int with exactly 64 bits
      - int32_t fixedInteger32 // int with exactly 32 bits

  CompWithInit:
    Members:
      - int i{42} // is there even another value to initialize ints to?
      - std::array<double, 10> arr {1.2, 3.4} // half initialized double array

  StructWithExtraCode:
    Members:
      - int x
    ExtraCode:
      declaration: "
        int negate() { x = -x; return x; }\n
      "
      declarationFile: "extra_code/component_declarations.cc"

datatypes :

  EventInfo:
    Description : "Event info"
    Author : "B. Hegner"
    Members :
     - int Number // event number
    MutableExtraCode :
       declaration: "void setNumber(int n) { Number( n ) ; } "
    ExtraCode:
      declaration: "int getNumber() const;"
      implementation: "int {name}::getNumber() const { return Number(); }"

  ExampleHit :
    Description : "Example Hit"
    Author : "B. Hegner"
    Members:
     - unsigned long long cellID      // cellID
     - double x [mm]     // x-coordinate
     - double y [mm]     // y-coordinate
     - double z [mm]     // z-coordinate
     - double energy [GeV] // measured energy deposit

  ExampleMC :
    Description : "Example MC-particle"
    Author: "F.Gaede"
    Members:
      - double energy  // energy
      - int PDG  // PDG code
    OneToManyRelations:
      - ExampleMC parents   // parents
      - ExampleMC daughters  // daughters

  ExampleCluster :
    Description : "Cluster"
    Author : "B. Hegner"
    Members:
      - double energy // cluster energy
    OneToManyRelations:
     - ExampleHit Hits // hits contained in the cluster
     - ExampleCluster Clusters // sub clusters used to create this cluster

  ExampleReferencingType :
    Description : "Referencing Type"
    Author : "B. Hegner"
    OneToManyRelations:
     - ExampleCluster         Clusters  // some refs to Clusters
     - ExampleReferencingType Refs      // refs into same type

  ExampleWithVectorMember :
    Description : "Type with a vector member"
    Author : "B. Hegner"
    VectorMembers:
     - int count // various ADC counts

  ExampleWithOneRelation :
    Description : "Type with one relation member"
    Author : "Benedikt Hegner"
    OneToOneRelations:
     - ExampleCluster cluster // a particular cluster

  ExampleWithArrayComponent:
    Description: "A type that has a component with an array"
    Author: "Thomas Madlener"
    Members:
      - SimpleStruct s // a component that has an array

  ExampleWithComponent :
    Description : "Type with one component"
    Author : "Benedikt Hegner"
    Members :
     - NotSoSimpleStruct component // a component

  ExampleForCyclicDependency1 :
    Description : "Type for cyclic dependency"
    Author : "Benedikt Hegner"
    OneToOneRelations :
      - ExampleForCyclicDependency2 ref // a ref

  ExampleForCyclicDependency2 :
    Description : "Type for cyclic dependency"
    Author : "Benedikt Hegner"
    OneToOneRelations :
      - ExampleForCyclicDependency1 ref // a ref

#  ExampleWithArray :
#    Description : "Type with an array"
#    Author : "Benedikt Hegner"
#    Members:
#      - std::array<int,33> array // the array

  ex42::ExampleWithNamespace :
    Description : "Type with namespace and namespaced member"
    Author : "Joschka Lingemann"
    Members:
      - ex2::NamespaceStruct component // a component

  ex42::ExampleWithARelation :
    Description : "Type with namespace and namespaced relation"
    Author : "Joschka Lingemann"
    Members:
     - float number // just a number
    OneToOneRelations :
     - ex42::ExampleWithNamespace ref // a ref in a namespace
    OneToManyRelations :
     - ex42::ExampleWithNamespace refs // multiple refs in a namespace

  ExampleWithDifferentNamespaceRelations:
    Description: "Datatype using a namespaced relation without being in the same namespace"
    Author: "Thomas Madlener"
    OneToOneRelations:
      - ex42::ExampleWithNamespace rel // a relation in a different namespace
    OneToManyRelations:
      - ex42::ExampleWithNamespace rels // relations in a different namespace

  ExampleWithArray:
    Description: "Datatype with an array member"
    Author: "Joschka Lingemann"
    Members:
      - NotSoSimpleStruct arrayStruct // component that contains an array
      - std::array<int,4> myArray // array-member without space to test regex
      - std::array<int, 4> anotherArray2 // array-member with space to test regex
      - std::array<int, 4> snail_case_array // snail case to test regex
      - std::array<int, 4> snail_case_Array3 // mixing things up for regex
      - std::array<ex2::NamespaceStruct, 4> structArray // an array containing structs

  ExampleWithFixedWidthIntegers:
    Description: "Datatype using fixed width integer types as members"
    Author: "Thomas Madlener"
    Members:
      - std::int16_t fixedI16 // some integer with exactly 16 bits
      - uint64_t fixedU64 // unsigned int with exactly 64 bits
      - uint32_t fixedU32 // unsigned int with exactly 32 bits
      - StructWithFixedWithTypes fixedWidthStruct // struct with more fixed width types
      - std::array<int16_t, 2> fixedWidthArray // 32 bits split into two times 16 bits

  ExampleWithUserInit:
    Description: "Datatype with user defined initialization values"
    Author: "Thomas Madlener"
    Members:
      - std::int16_t i16Val{42} // some int16 value
      - std::array<float, 2> floats {3.14f, 1.23f} // some float values
      - ex2::NamespaceStruct s{10, 11} // one that we happen to know works
      - double d{9.876e5} // double val
      - CompWithInit comp // To make sure that the default initializer of the component does what it should

  ExampleWithInterfaceRelation:
    Description: "Datatype that uses an interface type as one of its relations"
    Author: "Thomas Madlener"
    OneToOneRelations:
      - TypeWithEnergy aSingleEnergyType // single relation
      - ex42::AnotherTypeWithEnergy energyRelation // another single relation
    OneToManyRelations:
      - TypeWithEnergy manyEnergies // multiple relations
      - ex42::AnotherTypeWithEnergy moreEnergies // multiple namespace relations

  ExampleWithExternalExtraCode:
    Description: "Type showing usage of 'declaration', 'implementation', 'declarationFile' and 'implementationFile' directives'"
    Author: "Mateusz Jakub Fila"
    Members:
      - int number // a number
    ExtraCode:
      declaration:
        "int add(int i) const;"
      declarationFile: "extra_code/declarations.cc"
      implementation:
        "int {name}::add(int i) const { return number() + i; }"
      implementationFile: "extra_code/implementations.cc"
    MutableExtraCode:
      declaration:
        int add_inplace(int i);
      declarationFile: "extra_code/mutable_declarations.cc"
      implementation:
        int {name}::add_inplace(int i) { return number() += i; }
      implementationFile: "extra_code/mutable_implementations.cc"

  nsp::EnergyInNamespace:
    Description: "A type with energy in a namespace"
    Author: "Thomas Madlener"
    Members:
      - double energy // energy
    ExtraCode:
      declaration:
        "int PDG() const { return 42; }"

interfaces:
  TypeWithEnergy:
    Description: "Generic interface for all types with an energy member"
    Author: "Thomas Madlener"
    Types:
      - ExampleHit
      - ExampleMC
      - ExampleCluster
    Members:
      - double energy // the energy

  ex42::AnotherTypeWithEnergy:
    Description: "Another interface type for making sure they also work in namespaces"
    Author: "Thomas Madlener"
    Types:
      - ExampleMC
      - nsp::EnergyInNamespace
    Members:
      - double energy // the energy
      - int PDG // a pdg

links:
  TestLink:
    Description: "A link for testing"
    Author: "Thomas Madlener"
    From: ExampleHit
    To: ExampleCluster

  TestInterfaceLink:
    Description: "A link with an interface type for testing"
    Author: "Thomas Madlener"
    From: ExampleCluster
    To: TypeWithEnergy
